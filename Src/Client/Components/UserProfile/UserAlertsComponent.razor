@using BTB.Domain.Common.Pagination
@using BTB.Domain.Extensions
@using Newtonsoft.Json
@using System.ComponentModel
@using System.Threading
@using BTB.Client.Components.Dashboard
@inject HttpClient Http
@inject Blazored.Modal.Services.IModalService Modal
@inject IJSRuntime jsRuntime
@implements IDisposable

<style type="text/css">
    .default-card {

    }
    .triggered-card {
        background-color: #e4e4e4;
    }
</style>
<SpinLoader IsLoading="@_processingHttpRequest">
    <LoadingTemplate>
        <div class="d-flex" style="height: 75vh">
            <TimedLoader ShowDelay="500" />
        </div>
    </LoadingTemplate>
    <ContentTemplate>
            <div class="text-center">
                <h1>My Alerts</h1>
            </div>

            @if (_alertCards.Count() > 0)
            {
                <div class="mb-2 d-flex flex-row justify-content-between">
                    <div class="d-inline-block">
                        <div class="btn-group" role="group">
                            @foreach (var value in Enum<PaginationQuantity>.GetValues())
                            {
                                <button style="@PointerEventsStyle()" class="btn btn-primary" type="button"
                                        @onclick="@(async () => await SelectedQuantityAsync(value))">
                                    @((int)value)
                                </button>
                            }
                        </div>
                    </div>

                    <Pagination TotalPagesQuantity="@_totalPageQuantity"
                                CurrentPage="@_currentPage"
                                Radius="2"
                                SelectedPage="SelectedPageAsync"
                                PointerEventsStyle="@PointerEventsStyle()">
                    </Pagination>
                </div>

                <div class="mb-2 d-flex flex-row justify-content-between">
                    <div class="dropdown d-flex @(_dropdownButtonCollapsed ? "" : "show")">
                        <div @onclick="() => _dropdownButtonCollapsed = !_dropdownButtonCollapsed">
                            <button class="btn btn-secondary dropdown-toggle mr-2" type="button" id="dropdownButton">
                                Sort By
                            </button>
                            <div class="dropdown-menu @(_dropdownButtonCollapsed ? "" : "show")" aria-labelledby="dropdownButtonMenu">
                                <a class="dropdown-item" @onclick="@(async () => await SortCardsAsync("SymbolPair"))">Symbol</a>
                                <a class="dropdown-item" @onclick="@(async () => await SortCardsAsync("Condition"))">Condition</a>
                                <a class="dropdown-item" @onclick="@(async () => await SortCardsAsync("ValueType"))">Value Type</a>
                                <a class="dropdown-item" @onclick="@(async () => await SortCardsAsync("Value"))">Value</a>
                                <a class="dropdown-item" @onclick="@(async () => await SortCardsAsync("Email"))">Email</a>
                            </div>
                        </div>
                        <button class="btn btn-primary" @onclick="ReverseCardsOrderAsync">
                            <span class="oi oi-elevator" aria-hidden="true" />
                        </button>
                    </div>

                    <div>
                        @if (_alertCards.All(card => card.IsCardCollapsed == false))
                        {
                            <button class="btn btn-primary" @onclick="() => ResetCollapse(false)" disabled>Expand</button>
                        }
                        else
                        {
                            <button class="btn btn-primary" @onclick="() => ResetCollapse(false)">Expand</button>
                        }

                        @if (_alertCards.All(card => card.IsCardCollapsed == true))
                        {
                            <button class="btn btn-primary" @onclick="() => ResetCollapse(true)" disabled>Collapse</button>
                        }
                        else
                        {
                            <button class="btn btn-primary" @onclick="() => ResetCollapse(true)">Collapse</button>
                        }
                    </div>
                </div>

                @for (int i = 0; i < _alertCards.Count(); i++)
                {
                    int alertIndex = i;
                    AlertVO alert = _alertCards[alertIndex].AlertVO;
                    string cardStyle = alert.IsDisabled ? "triggered-card" : "default-card";

                    <div class="card mb-2 @cardStyle">
                        <div class="card-header d-flex flex-row justify-content-between" @onclick="() => ToggleCardCollapse(alertIndex)">
                            <div>
                                <NavLink class="btn btn-link" href="@($"/details/{alert.SymbolPair}")" @onclick:stopPropagation="true">
                                    @alert.SymbolPair
                                </NavLink>
                                @alert.Condition @alert.Value.ToString("#.##")
                                @if (alert.IsDisabled)
                                {
                                    <i style="font-size: 14px;">(disabled)</i>
                                }

                            </div>

                            <div>
                                <button class="btn btn-link" @onclick="() => ShowUpdateAlertModal(alert)" @onclick:stopPropagation="true">
                                    <span class="oi oi-pencil" aria-hidden="true" />
                                </button>

                                <button class="btn btn-link" @onclick="async () => await DeleteAlertAsync(alert.Id)" @onclick:stopPropagation="true">
                                    <span class="oi oi-x" aria-hidden="true" />
                                </button>
                            </div>
                        </div>

                        <div class="@(_alertCards[alertIndex].IsCardCollapsed ? "collapse" : "")">
                            <div class="card-body">

                                <div class="row">
                                    <h5 class="col-12 col-lg-4">Condition</h5>
                                    <p class="col-12 col-lg-8">@alert.Condition</p>
                                </div>

                                <div class="row">
                                    <h5 class="col-12 col-lg-4">Value Type</h5>
                                    <p class="col-12 col-lg-8">@alert.ValueType</p>
                                </div>

                                <div class="row">
                                    <h5 class="col-12 col-lg-4">Value</h5>
                                    @if (alert.AdditionalValue != 0.0m)
                                    {
                                        <p class="col-12 col-lg-8">@(alert.Value + " - " + alert.AdditionalValue)</p>
                                    }
                                    else
                                    {
                                        <p class="col-12 col-lg-8">@alert.Value</p>
                                    }
                                </div>

                                <div class="row">
                                    <h5 class="col-12 col-lg-4">Only once</h5>
                                    <p class="col-12 col-lg-8">@(alert.TriggerOnce ? "Yes" : "No")</p>
                                </div>

                                <div class="row">
                                    <h5 class="col-12 col-lg-4">Was triggered</h5>
                                    @if (alert.WasTriggered)
                                    {
                                        <p class="col-12 col-lg-8 text-success">Yes</p>
                                    }
                                    else
                                    {
                                        <p class="col-12 col-lg-8 text-danger">No</p>
                                    }
                                </div>

                                @if (alert.SendEmail)
                                {
                                    <div class="row">
                                        <h5 class="col-12 col-lg-4">Message to @alert.Email</h5>
                                        <p class="col-12 col-lg-8">@alert.Message</p>
                                    </div>
                                }
                                else
                                {
                                    <h5>This alert has no email notification.</h5>
                                }
                            </div>
                        </div>
                    </div>
                }

                <div style="height: 10vh" />
            }
            else
            {
                <div class="text-center">
                    <h4>You have no alerts. Go to the <a href="/">dashboard</a> and create some!</h4>
                </div>
            }
    </ContentTemplate>
</SpinLoader>

@code {
    private class AlertCard
    {
        public AlertVO AlertVO { get; set; }
        public bool IsCardCollapsed { get; set; }
    }

    private int _totalPageQuantity;
    private int _currentPage = 1;
    private int _currentQuantity = 10;
    private bool _processingHttpRequest = false;
    private readonly CancellationTokenSource _tokenSource = new CancellationTokenSource();
    private IList<AlertCard> _alertCards = new List<AlertCard>();
    private bool _dropdownButtonCollapsed = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private void ToggleCardCollapse(int alertIndex)
    {
        _alertCards[alertIndex].IsCardCollapsed = !_alertCards[alertIndex].IsCardCollapsed;
    }

    private async Task LoadDataAsync()
    {
        if (!_processingHttpRequest)
        {
            _processingHttpRequest = true;
            var response = await Http.GetAsync($"api/alerts?page={_currentPage}&quantity={_currentQuantity}", _tokenSource.Token);

            if (_tokenSource.Token.IsCancellationRequested)
            {
                return;
            }

            _alertCards = new List<AlertCard>();

            if (response.IsSuccessStatusCode)
            {
                _totalPageQuantity = int.Parse(response.Headers.GetValues("quantity").First());
                string jsonString = await response.Content.ReadAsStringAsync();
                var alertDtos = JsonConvert.DeserializeObject<IList<AlertVO>>(jsonString);

                foreach (var dto in alertDtos)
                {
                    _alertCards.Add(new AlertCard() { AlertVO = dto, IsCardCollapsed = true });
                }
            }

            ResetCollapse(true);
            _processingHttpRequest = false;
        }
    }

    private async Task SelectedPageAsync(int page)
    {
        _currentPage = page;
        await LoadDataAsync();
    }

    private async Task SelectedQuantityAsync(PaginationQuantity quantity)
    {
        _currentPage = 1;
        _currentQuantity = (int)quantity;
        await LoadDataAsync();
    }

    private string PointerEventsStyle()
    {
        return _processingHttpRequest ? "pointer-events: none;" : null;
    }

    private void ShowUpdateAlertModal(AlertVO alert)
    {
        var parameters = new ModalParameters();
        var options = new ModalOptions()
        {
            HideCloseButton = true,
            HideHeader = true
        };

        parameters.Add("ShouldUpdateAlert", true);
        parameters.Add("Alert", alert);
        parameters.Add("OnModalClosedAsync", new Func<Task>(async () => { await LoadDataAsync(); this.StateHasChanged(); }));
        Modal.Show<AlertSubscription>("Subscription", parameters, options);
    }

    private async Task DeleteAlertAsync(int alertId)
    {
        var confirmed = await jsRuntime.InvokeAsync<bool>("confirm", "Are you sure want to delete this alert?");
        if (confirmed)
        {
            await Http.DeleteAsync($"api/alerts/{alertId}");
            _alertCards.Remove(_alertCards.Where(card => card.AlertVO.Id == alertId).FirstOrDefault());
        }
    }

    private async Task SortCardsAsync(string property)
    {
        PropertyDescriptor propertyDescriptor = TypeDescriptor.GetProperties(typeof(AlertVO)).Find(property, false);
        _alertCards = await Task.Run(() => _alertCards.OrderBy(card => propertyDescriptor.GetValue(card.AlertVO)).ToList());
    }

    private async Task ReverseCardsOrderAsync()
    {
        _alertCards = await Task.Run(() => _alertCards.Reverse().ToList());
    }

    private void ResetCollapse(bool collapse)
    {
        foreach (var card in _alertCards)
        {
            card.IsCardCollapsed = collapse;
        }
    }

    public void Dispose()
    {
        _tokenSource.Cancel();
    }
}
