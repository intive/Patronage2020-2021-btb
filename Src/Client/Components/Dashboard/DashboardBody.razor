@using System.Text.Json
@using System.Text.RegularExpressions
@using System.Threading
@using BTB.Client.Models
@using BTB.Domain.Common
@using BTB.Domain.Common.Pagination
@using BTB.Domain.Extensions
@using Blazored
@using Blazored.Modal
@using Blazored.Modal.Services
@using Blazored.Toast
@using Blazored.Toast.Services
@using Blazored.LocalStorage;
@using Microsoft.AspNetCore.SignalR.Client 

@inject HttpClient Http
@inject ICustomHttpClient Http
@implements IDisposable

@inject IToastService Toast
@inject NavigationManager navigationManager
@inject ILocalStorageService localStorage


<div class="btn-toolbar d-inline-block mb-2" role="toolbar" aria-label="Toolbar with button groups">
    <div class="btn-group mr-2" role="group" aria-label="Quantity group">
        @foreach (var value in Enum<PaginationQuantity>.GetValues())
        {
            <button style="@PointerEventsStyle()" class="btn btn-primary" type="button" @onclick="@(() => SelectedQuantity(value))">@((int)value)</button>
        }
    </div>
</div>

<Pagination TotalPagesQuantity="@_totalPageQuantity" CurrentPage="@_currentPage" Radius="2" SelectedPage="SelectedPage" PointerEventsStyle="@PointerEventsStyle()"></Pagination>

<EditForm class="form-group" Model="_filter" OnValidSubmit="@Filter">
    <DataAnnotationsValidator />
    <ValidationMessage For="@(() => _filter.SymbolName)" />
    <InputText style="@PointerEventsStyle()" id="inputvalue" class="mr-1 align-middle" placeholder="Enter symbol or pair" @bind-Value="@_filter.SymbolName" />
    <button style="@PointerEventsStyle()" class="btn btn-primary btn-sm mr-1" type="button" @onclick="Filter"><span class="oi oi-magnifying-glass"></span> Filter </button>
    <button style="@PointerEventsStyle()" class="btn btn-danger btn-sm mr-3" type="button" @onclick="Clear"><span class="oi oi-action-undo"></span> Clear </button>

    <div class="btn-group mr-2" role="group" aria-label="Time group">
        @foreach (var value in Enum<CurrencyFilter>.GetValues())
        {
            <button style="@PointerEventsStyle()" class="btn btn-primary btn-sm" type="button" @onclick=@(async () => { _filter.SymbolName = value.ToString(); await Filter(); })>@value.ToString()</button>
        }
    </div>
</EditForm>

<table class="table">
    <thead>
        <tr>
            <th style="width: 10%;" class="text-center">Favorite</th>
            <th style="width: 20%;" class="text-right">Symbol</th>
            <th style="width: 25%;" class="text-right">Price</th>
            <th style="width: 25%;" class="text-right">Volume</th>
            <th style="width: 20%;" class="text-center">Subscribe</th>
            <th style="width: 20%;" class="text-center">Bet</th>
        </tr>
    </thead>
    <tbody>
        <SpinLoader IsLoading="@(_dashboardElements == null)">
            <LoadingTemplate>
                <tr>
                    <td colspan="5" style="vertical-align: middle; background-color: white; height:500px;">
                        <Flow Color="#428bca" Size="60px" Center="true" />
                    </td>
                </tr>
            </LoadingTemplate>
            <ContentTemplate>
                @if (_dashboardElements.Any())
                {
                    @foreach (var item in _dashboardElements)
                    {
                        <SymbolPair DashboardPairVO="item" OnChangeFavorite="@SwitchElement"/>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="5" style="vertical-align: middle; background-color: whitesmoke; height: 500px; text-align: center;">
                            <p class="align-middle d-inline-block"> No results </p>
                        </td>
                    </tr>
                }
            </ContentTemplate>
        </SpinLoader>
    </tbody>
</table>

@code {

    private HubConnection _connection;
    private string lastNotification = "";

    private IEnumerable<DashboardPairVO> _dashboardElements { get; set; }
    private List<DashboardPairVO> _pageItems;

    private FilterModel _filter = new FilterModel();

    private int _totalPageQuantity;
    private int _currentPage = 1;
    private int _currentQuantity = 10;

    private bool _isRequestRunning = false;

    private readonly CancellationTokenSource _tokenSource = new CancellationTokenSource();

    private async Task Filter()
    {
        _currentPage = 1;
        _currentQuantity = 10;

        if (string.IsNullOrWhiteSpace(_filter.SymbolName) ||
        !Regex.IsMatch(_filter.SymbolName, @"^[a-zA-Z]+$"))
        {
            return;
        }

        if (string.Equals(_filter.SymbolName, CurrencyFilter.ALL.ToString()))
        {
            _filter.SymbolName = string.Empty;
        }

        await LoadDashboardTableAsync();
    }

    private async Task Clear()
    {
        _currentPage = 1;
        _currentQuantity = 10;
        _filter.SymbolName = string.Empty;

        await LoadDashboardTableAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardTableAsync();
        await ConnectToSignalRAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }

    private async Task LoadDashboardTableAsync()
    {
        if (!_isRequestRunning)
        {
            _dashboardElements = null;

            _isRequestRunning = true;

            var httpResponse = await Http.GetAsync($"/api/dashboard?page={_currentPage}&quantity={_currentQuantity}&name={_filter.SymbolName}", _tokenSource.Token);

            if (_tokenSource.Token.IsCancellationRequested)
            {
                return;
            }

            if (httpResponse.IsSuccessStatusCode)
            {
                _totalPageQuantity = int.Parse(httpResponse.Headers.GetValues("quantity").First());
                var responseString = await httpResponse.Content.ReadAsStringAsync();

                _dashboardElements = JsonSerializer.Deserialize<IEnumerable<DashboardPairVO>>(responseString, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            }
            else
            {
                _totalPageQuantity = 1;
                _dashboardElements = new List<DashboardPairVO>();
            }

            _isRequestRunning = false;
            _pageItems = _dashboardElements.ToList();
        }
    }

    private async Task SelectedPage(int page)
    {
        _currentPage = page;

        await LoadDashboardTableAsync();
    }

    private async Task SelectedQuantity(PaginationQuantity quantity)
    {
        _currentPage = 1;
        _currentQuantity = (int)quantity;

        await LoadDashboardTableAsync();
    }

    private string PointerEventsStyle()
    {
        return _isRequestRunning ? "pointer-events: none;" : null;
    }

    public void Dispose()
    {
        _tokenSource.Cancel();
    }

    public void SwitchElement(int itemId)
    {
        var elementToDelete = _pageItems.Find(e => e.Id == itemId);
        elementToDelete.IsFavorite = !elementToDelete.IsFavorite;
    }

    private async Task ConnectToSignalRAsync()
    {
        try
        {
            _connection = new HubConnectionBuilder()
                .WithUrl(navigationManager.ToAbsoluteUri($"/hub/notifications?access_token={await localStorage.GetItemAsync<string>("authToken")}"))
                .Build();
            await _connection.StartAsync();

        }
        catch (Exception e)
        {
            // TODO: Log exception
        }

        _connection.Closed += async (exception) =>
        {
            await _connection.StartAsync();
        };

        _connection.On<string>("inbrowser", response =>
        {
            if (!lastNotification.Equals(response))
            {
                Toast.ShowToast(ToastLevel.Info, $"Alert: {response}!");
                lastNotification = response;
            }
        });
    }
}
