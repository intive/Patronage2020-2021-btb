@using BTB.Client.Models
@using BTB.Client.Models.Validation
@inject HttpClient Http

<div class="container">
    <EditForm Model="@_formModel" OnValidSubmit="HandleSubmitAsync" OnInvalidSubmit="HandleInvalidSubmit">
        <FluentValidator Validator="_validator" />

        <div class="text-center">
            <h3>Change Password</h3>
        </div>
        <br />
        <div class="form-group row">
            <label for="currentPassword" class="col-sm-3 col-form-label">Current password</label>
            <div class="col-sm-4">
                <InputText  @bind-Value="_formModel.CurrentPassword" type="password" class="form-control form-control-sm" id="currentPassword" placeholder="Current password" />
                <ValidationMessage For="@(() => _formModel.CurrentPassword)" style="font-size:14px; margin-bottom:10px" />
            </div>
        </div>

        <div class="form-group row">
            <label for="newPassword" class="col-sm-3 col-form-label">New password</label>
            <div class="col-sm-4">
                <InputText @bind-Value="_formModel.NewPassword" type="password" class="form-control form-control-sm" id="newPassword" placeholder="New password" />
                <ValidationMessage For="@(() => _formModel.NewPassword)" style="font-size:14px; margin-bottom:10px" />
            </div>
        </div>

        <div class="form-group row">
            <label for="newPasswordConfirmation" class="col-sm-3 col-form-label">New password confirmation</label>
            <div class="col-sm-4">
                <InputText @bind-Value="_formModel.NewPasswordConfirmation" type="password" class="form-control form-control-sm" id="newPasswordConfirmation" placeholder="New password confirmation" />
                <ValidationMessage For="@(() => _formModel.NewPasswordConfirmation)" style="font-size:14px; margin-bottom:10px" />
            </div>
        </div>

        <div class="text-center">
            @if (_passwordChanged)
            {
                <p style="color:green">@_passwordChangedInfo</p>
            }
            @if (_errorOccured)
            {
                <p style="color:red">@_changePasswordError</p>
            }
        </div>

        <div class="justify-content-around row">
            <div class="text-center">
                <button type="submit" class="btn btn-primary">Confirm</button>
            </div>
        </div>

    </EditForm>

</div>

@code {

    private ChangePasswordFormModelValidator _validator = new ChangePasswordFormModelValidator();
    private ChangePasswordFormModel _formModel = new ChangePasswordFormModel();

    private string _changePasswordError = "Current password does not match.";
    private bool _errorOccured = false;

    private string _passwordChangedInfo = "Password has been changed.";
    private bool _passwordChanged = false;


    private void HandleInvalidSubmit()
    {
        _passwordChanged = false;
    }

    private async Task HandleSubmitAsync()
    {
        try
        {
            await Http.SendJsonAsync(HttpMethod.Post, $"/api/authorize/changepassword", _formModel);
            _passwordChanged = true;
            _errorOccured = false;
        }
        catch(Exception)
        {
            _passwordChanged = false;
            _errorOccured = true;
        }
    }
}
