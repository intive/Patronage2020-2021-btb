@inject HttpClient Http
@using Dto

    <EditForm Model="@_alertDto" OnValidSubmit="CreateAlert">
        <div class="modal" tabindex="-1" style="display:@toggleModal; font-size: 12px" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Create Alert on @symbol</h5>
                    </div>

                    <div class="modal-body">
                        <p>Condition @symbol</p>
                        <div class="form-group form-inline">
                            <label class="control-label">
                                Select condition:
                                <InputSelect @bind-Value="_alertDto.Condition">
                                    <option disabled selected> -- select an option -- </option>
                                    <option value="crossing">Crossing</option>
                                </InputSelect>
                            </label>
                        </div>

                        <div class="form-group form-inline">
                            <label class="control-label">
                                Select value type:
                                <InputSelect @bind-Value="_alertDto.ValueType">
                                    <option disabled selected> -- select an option -- </option>
                                    <option value="volume">Volume</option>
                                    <option value="price">Price</option>
                                    <option value="tradeCount">Trade Count</option>
                                </InputSelect>
                            </label>
                        </div>

                        <div class="form-group form-inline">
                            <label class="control-label">
                                Value:
                                <InputNumber @bind-Value="_alertDto.Value" />
                            </label>
                        </div>

                        <div class="form-group form-inline">
                            <label class="control-label">
                                Alert actions:
                                <InputCheckbox @bind-Value="_alertDto.SendEmail" />

                                <span>Send Email</span>
                            </label>
                        </div>

                        <div class="form-group form-inline">
                            <label class="control-label">
                                Email:
                                <InputText @bind-Value="_alertDto.Email" />
                            </label>
                        </div>

                        <div class="form-group">
                            <label>
                                Message:
                                <InputTextArea @bind-Value="_alertDto.Message"></InputTextArea>
                            </label>
                        </div>

                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <p style="color: red">@_serverValidadion</p>
                        <div class="text-right">
                            <button class="btn btn-danger btn-sm" type="reset" @onclick="Close">Cancel</button>
                            <button class="btn btn-success btn-sm" type="submit">Create</button>
                        </div>
                    </div>                 
                </div>
            </div>
        </div>
    </EditForm>


@code {


    private static string _turnOffStyle = "none";
    private static string _serverError = "Problem on server.";

   
    private bool _exceptionCatched = false;
    private string _serverValidadion;

    private AlertDto _alertDto = new AlertDto();


    [Parameter]
    public string toggleModal { get; set; }

    [Parameter]
    public string symbol { get; set; }

    [Parameter]
    public Action<string> turnOn { get; set; }

    protected async void CreateAlert()
    {
        _alertDto.Symbol = symbol;

        try
        {
            await Http.SendJsonAsync(HttpMethod.Post, "/api/alerts/new",_alertDto);

            _exceptionCatched = false;

            _serverValidadion = "";
        }
        catch(Exception)
        {
            _exceptionCatched = true;

            _serverValidadion = _serverError;
        }

        if (!_exceptionCatched)
        {
            Close();
        }

        StateHasChanged();

    }

    private void Close()
    {
        toggleModal = _turnOffStyle;

        _alertDto.Reset();

        _serverValidadion = "";

        StateHasChanged();
    }


}