@page "/editprofile"
@using Client.Pages.Dto;
@using Newtonsoft.Json;
@using System.ComponentModel.DataAnnotations;
@using System.Net;
@using System.Net.Http;
@using System.Text;
@inject NavigationManager NavigationManager
@inject HttpClient Http

<div class="text-center">
    <h3>Edit Profile</h3>
</div>

@if (_processingHttpRequestFinished)
{
    <div class="container">
        <EditForm Model="@_formModel" OnValidSubmit="HandleValidSubmitAsync">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group row">
                <label class="col-sm-3 col-form-label" for="username">Username</label>
                <div class="col-sm-9">
                    <InputText type="text" class="form-control" id="username" placeholder="Enter username."
                               @bind-Value="@_formModel.Username"></InputText>
                    <small id="usernameHelp" class="form-text text-muted">A nickname visible to other users.</small>
                </div>
            </div>

            <div class="form-group row">
                <label class="col-sm-3 col-form-label" for="profileBio">Profile Bio</label>
                <div class="col-sm-9">
                    <textarea class="form-control" id="profileBio" rows="3" maxlength="255" placeholder="Type here..."
                              @bind="_formModel.ProfileBio" @bind:event="oninput"></textarea>
                    <small id="profileBioHelp" class="form-text text-muted">Characters left: @(255 - _formModel.ProfileBio.Length)</small>
                </div>
            </div>

            <div class="form-group row">
                <label class="col-sm-3 col-form-label" for="favouritePair">Your favourite trading pair</label>
                <div class="col-sm-9">
                    <InputText type="text" class="form-control" id="favouritePair" placeholer="Enter your favourite trading pair."
                               @bind-Value="@_formModel.FavouriteTradingPair" @oninput="@(() => _tradingPairDoesNotExist = false)"></InputText>
                    @if (_tradingPairDoesNotExist)
                    {
                        <small id="profileBioHelp" class="form-text text-danger">Sorry, this trading pair does not exist.</small>
                    }
                </div>
            </div>

            <div class="justify-content-around row">
                <div class="text-center">
                    <a class="btn btn-danger" href="/userprofile">Discard changes</a>
                </div>

                <div class="text-center">
                    <button type="submit" class="btn btn-primary">Submit changes</button>
                </div>
            </div>
        </EditForm>
    </div>
}

@code {
    private int loggedInUserId = 1;
    private UserProfileInfoDto _existingUserProfileInfo = null;
    private bool _processingHttpRequestFinished = false;
    private bool _tradingPairDoesNotExist = false;

    private class UserProfileFormModel
    {
        public int UserId { get; set; }
        [Required(ErrorMessage = "Username is required.")]
        [StringLength(16, MinimumLength = 5, ErrorMessage = "Username must be between 5 and 16 characters long.")]
        public string Username { get; set; }
        [StringLength(256, ErrorMessage = "Profile bio cannot be longer than 256 characters.")]
        public string ProfileBio { get; set; }
        [StringLength(10, MinimumLength = 5, ErrorMessage = "Trading pair symbol must be between 5 and 10 characters long.")]
        [RegularExpression("^([A-Z|a-z]{5,10})$", ErrorMessage = "Trading pair format is incorrect.")]
        public string FavouriteTradingPair { get; set; }
    }

    private UserProfileFormModel _formModel = new UserProfileFormModel()
    {
        UserId = 1,
        Username = "",
        ProfileBio = "",
        FavouriteTradingPair = null
    };

    protected override async Task OnInitializedAsync()
    {
        var response = await Http.GetAsync($"api/userprofile/{loggedInUserId}");
        if (response.IsSuccessStatusCode)
        {
            var jsonString = await response.Content.ReadAsStringAsync();
            _existingUserProfileInfo = JsonConvert.DeserializeObject<UserProfileInfoDto>(jsonString);
            _formModel.Username = _existingUserProfileInfo.Username;
            _formModel.ProfileBio = _existingUserProfileInfo.ProfileBio;
            _formModel.FavouriteTradingPair = _existingUserProfileInfo.FavouriteTradingPair;
        }

        _processingHttpRequestFinished = true;
    }

    private async Task HandleValidSubmitAsync()
    {
        var httpRequestContent = new StringContent(JsonConvert.SerializeObject(_formModel), Encoding.UTF8, "application/json");
        HttpResponseMessage response;
        if (_existingUserProfileInfo == null)
        {
            response = await Http.PostAsync("api/userprofile", httpRequestContent);
        }
        else
        {
            response = await Http.PutAsync($"api/userprofile/{loggedInUserId}", httpRequestContent);
        }

        if (response.StatusCode == HttpStatusCode.BadRequest)
        {
            _tradingPairDoesNotExist = true;
        }
        else
        { 
            NavigationManager.NavigateTo("/userprofile");
        }
    }
}
