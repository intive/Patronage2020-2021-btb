@using BTB.Client.Components.Bets;
@inject ICustomHttpClient Http
@inject Blazored.Modal.Services.IModalService Modal

<tr>
    <td class="text-center">

        @if (@DashboardPairVO.IsFavorite)
        {
            <a><span class="golden-star" @onclick="@(() => RemoveFromFavorite(@DashboardPairVO.Id))">★</span></a>
        }
        else
        {
            <a><span class="empty-star" @onclick="@(() => AddToFavorite(@DashboardPairVO.Id))">☆</span></a>
        }
    </td>
    <td class="text-right">
        <NavLink href="@($"/details/{@DashboardPairVO.PairName}")">@DashboardPairVO.PairName</NavLink>
    </td>
    <td class="text-right">@DashboardPairVO.ClosePrice</td>
    <td class="text-right">@DashboardPairVO.Volume</td>
    <td class="text-center"><button type="button" class="btn btn-primary" @onclick="@(() => HandleOnSelected(@DashboardPairVO.PairName))">Subscribe</button></td>
    <td class="text-center"><button type="button" class="btn btn-info" style="width: 100px" @onclick="@(() => HandleOnBet(@DashboardPairVO.PairName))">Bet</button></td>
</tr>

@code {
    [Parameter]
    public DashboardPairVO DashboardPairVO { get; set; }
    [Parameter]
    public EventCallback<int> OnChangeFavorite { get; set; }

    private void HandleOnSelected(string symbol)
    {
        var parameters = new ModalParameters();
        var options = new ModalOptions()
        {
            HideCloseButton = true,
            HideHeader = true
        };

        parameters.Add("ShouldUpdateAlert", false);
        parameters.Add("Alert", new AlertVO() { SymbolPair = symbol });
        parameters.Add("OnModalClosedAsync", null);
        Modal.Show<AlertSubscription>("Subscription", parameters, options);
    }

    private void HandleOnBet(string symbol)
    {
        var options = new ModalOptions()
        {
            HideCloseButton = true,
            HideHeader = true
        };

        var parameters = new ModalParameters();
        parameters.Add("ShouldUpdateBet", false);
        parameters.Add("Bet", new BetVO() { SymbolPair = symbol });
        parameters.Add("OnModalClosedAsync", null);
        Modal.Show<BetFormModal>("Place a bet", parameters, options);
    }

    public async Task AddToFavorite(int itemId)
    {
        await Http.SendJsonAsync(HttpMethod.Post, $"api/favoritesymbolpairs/{itemId}", new { SymbolPairId = itemId });
        await OnChangeFavorite.InvokeAsync(itemId);
    }

    public async Task RemoveFromFavorite(int itemId)
    {
        await Http.SendJsonAsync(HttpMethod.Delete, $"api/favoritesymbolpairs/{itemId}", new { SymbolPairId = itemId });
        await OnChangeFavorite.InvokeAsync(itemId);
    }
}
