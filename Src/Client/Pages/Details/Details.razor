@page "/details/{symbol}"

@using BTB.Domain.Common
@using Binance.Net.Objects
@using System.Net.Http;
@using System.Text.Json
@using BTB.Domain.ValueObjects
@using BTB.Client.Pages.Details.Enums
@using BTB.Domain.Common.Pagination
@using BTB.Domain.Extensions
@inject HttpClient Http

<h1>Details of @Symbol</h1>
<div class="rounded shadow-lg white-padding" style="padding:5px;">
    <div class="btn-toolbar" role="toolbar" aria-label="Toolbar with button groups">
        <div class="btn-group mr-2" role="group" aria-label="Time group">
            <a href="#" role="button" class="btn btn-success btn-xs" id="label-btn" aria-disabled="true">Kline interval</a>
            @foreach (KeyValuePair<KlineInterval, string> entry in KlineDictionary)
            {
                <button @onclick=@(() => SelectKlineInterval(entry.Key)) type="button" class="btn btn-primary">@entry.Value</button>
            }
        </div>
        <div class="btn-group mr-2" role="group" aria-label="Table Charts Indicators">
            <a href="#" role="button" class="btn btn-success btn-xs" id="label-btn" aria-disabled="true">Current view</a>
            @foreach (var value in Enum<CurrentDetailsView>.GetValues())
            {
                <button @onclick="@(() => SelectCurrentView(value))" type="button" class="btn btn-primary">@value</button>
            }
        </div>
        <div class="btn-group mr-2" role="group" aria-label="Data Source">
            <a href="#" role="button" class="btn btn-success btn-xs" id="label-btn" aria-disabled="true">Data source</a>
            @foreach (var value in Enum<DetailsDataSource>.GetValues())
            {
                <button @onclick=@(() => SelectDataSource(value)) type="button" class="btn btn-primary">@value</button>
            }
        </div>
    </div>

    <br />


    <div class="btn-toolbar d-inline-block mb-2" role="toolbar" aria-label="Toolbar with button groups">
        <div class="btn-group mr-2" role="group" aria-label="Quantity group">
            <a href="#" role="button" class="btn btn-success btn-xs" id="label-btn" aria-disabled="true">Number of displayed elements</a>
            @foreach (var value in Enum<PaginationQuantity>.GetValues())
            {
                <button class="btn btn-primary" type="button" @onclick="@(() => SelectQuantity(value))">@((int)value)</button>
            }
        </div>
    </div>

    <Pagination TotalPagesQuantity="@_totalPageQuantity" CurrentPage="@_currentPage" Radius="2" SelectedPage="SelectPage" PointerEventsStyle="@PointerEventsStyle()"></Pagination>

    <SpinLoader IsLoading="@(_priceHistory == null)">
        <LoadingTemplate>
            <div class="d-flex" style="height: 70vh">
                <TimedLoader ShowDelay="500" />
            </div>
        </LoadingTemplate>
        <ContentTemplate>
            <br />

            <CascadingValue Value="_priceHistory.Take((int)_currentQuantity)">
                @if (CurrentDetailsView.Table == _currentView)
                {
                    <DetailsTable />
                }
            </CascadingValue>

            <CascadingValue Value="_priceHistory.Take((int)_currentQuantity)">
                @if (CurrentDetailsView.Chart == _currentView)
                {
                    <DetailsChart />
                }
            </CascadingValue>

            <CascadingValue Value="_priceHistory" Name="PriceHistory">
                <CascadingValue Value="_currentQuantity" Name="PaginationQuantity">
                    @if (CurrentDetailsView.Indicators == _currentView)
                    {
                        <DetailsIndicators />
                    }
                </CascadingValue>
            </CascadingValue>
        </ContentTemplate>
    </SpinLoader>
</div>

@code {

    private const int ExtraAmount = 50;

    private IEnumerable<KlineVO> _priceHistory { get; set; }

    private CurrentDetailsView _currentView = CurrentDetailsView.Table;
    private KlineInterval _klineInterval = KlineInterval.FiveMinutes;
    private PaginationQuantity _currentQuantity = PaginationQuantity.Ten;
    private DetailsDataSource _dataSource = DetailsDataSource.Database;

    private int _totalPageQuantity;
    private int _currentPage = 1;

    private bool _isRequestRunning = false;

    private readonly Dictionary<KlineInterval, string> KlineDictionary = new Dictionary<KlineInterval, string>()
{
        { KlineInterval.FiveMinutes, "5 min" },
        { KlineInterval.FifteenMinutes, "15 min" },
        { KlineInterval.OneHour, "1h" },
        { KlineInterval.TwoHour, "2h" },
        { KlineInterval.FourHour, "4h" },
        { KlineInterval.TwelveHour, "12h" },
        { KlineInterval.OneDay, "1d" },
    };

    [Parameter]
    public string Symbol { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await RefreshDetailsView();
    }

    private async Task RefreshDetailsView()
    {
        if (!_isRequestRunning)
        {
            _priceHistory = null;
            _isRequestRunning = true;

            var response = await Http.GetAsync($"api/details/{Symbol}?interval={_klineInterval}&page={_currentPage}&quantity={_currentQuantity}&datasource={_dataSource}&extraamount={ExtraAmount}");

            if (response.IsSuccessStatusCode)
            {
                _totalPageQuantity = int.Parse(response.Headers.GetValues("quantity").First());
                var jsonString = await response.Content.ReadAsStringAsync();
                _priceHistory = JsonSerializer.Deserialize<IEnumerable<KlineVO>>(jsonString, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            }
            else
            {
                _totalPageQuantity = 1;
                _priceHistory = new List<KlineVO>();
            }

            _isRequestRunning = false;
        }
    }

    private async Task SelectKlineInterval(KlineInterval klineInterval)
    {
        _klineInterval = klineInterval;

        await RefreshDetailsView();
    }

    private void SelectCurrentView(CurrentDetailsView currentDetailsView)
    {
        _currentView = currentDetailsView;
    }

    private async Task SelectDataSource(DetailsDataSource detailsDataSource)
    {
        _dataSource = detailsDataSource;
        _currentPage = 1;

        await RefreshDetailsView();
    }

    private async Task SelectPage(int page)
    {
        _currentPage = page;

        await RefreshDetailsView();
    }

    private async Task SelectQuantity(PaginationQuantity quantity)
    {
        _currentPage = 1;
        _currentQuantity = quantity;

        await RefreshDetailsView();
    }

    private string PointerEventsStyle()
    {
        return _isRequestRunning ? "pointer-events: none;" : null;
    }

}
