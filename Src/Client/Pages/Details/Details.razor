@page "/details/{symbol}"

@using BTB.Domain.Common
@using Binance.Net.Objects
@using System.Net.Http;
@using System.Text.Json
@using BTB.Domain.ValueObjects
@using BTB.Client.Pages.Details.Enums
@using BTB.Domain.Common.Pagination
@using BTB.Domain.Extensions
@inject ICustomHttpClient Http

<h1>Details of @Symbol</h1>
<div class="rounded shadow-lg white-padding" style="width: 100%; text-align: center;">
    <div class="btn-toolbar" role="toolbar" aria-label="Toolbar with button groups">
        <div class="btn-group mr-2" role="group" aria-label="Time group">
            <a href="#" role="button" class="btn btn-info btn-xs" id="label-btn" aria-disabled="true">Kline interval</a>
            @foreach (KeyValuePair<KlineInterval, string> entry in KlineDictionary)
            {
                <button @onclick=@(() => SelectKlineInterval(entry.Key)) type="button" class="btn btn-primary">@entry.Value</button>
            }
        </div>
        <div class="btn-group mr-2" role="group" aria-label="Data Source">
            <a href="#" role="button" class="btn btn-info btn-xs" id="label-btn" aria-disabled="true">Data source</a>
            @foreach (var value in Enum<DetailsDataSource>.GetValues())
            {
                <button @onclick=@(() => SelectDataSource(value)) type="button" class="btn btn-primary">@value</button>
            }
        </div>
    </div>

    <br />

    <div class="d-flex justify-content-between mb-2">
        <div class="d-inline-block">
            <div class="btn-group" role="group">
                @foreach (var value in Enum<PaginationQuantity>.GetValues())
                {
                    <button class="btn btn-primary" type="button" @onclick="@(() => SelectQuantity(value))">@((int)value)</button>
                }
            </div>
        </div>
        <Pagination TotalPagesQuantity="@_totalPageQuantity" CurrentPage="@_currentPage" Radius="2" SelectedPage="SelectPage" PointerEventsStyle="@PointerEventsStyle()"></Pagination>
    </div>

    <div id="exTab2" class="container p-0">
        <ul class="nav">
            <li class="rounded-left" style="@SetSelectedTableStyle()">
                <a class="nav-link" href="#1b" data-toggle="tab" style="color:#2c2b30" @onclick="@(() => SelectCurrentView(CurrentDetailsView.Table))">Table</a>
            </li>
            <li class="active" style="@SetSelectedChartStyle()">
                <a class="nav-link" href="#2b" data-toggle="tab" style="color:#2c2b30" @onclick="@(() => SelectCurrentView(CurrentDetailsView.Chart))">Chart</a>
            </li>
            <li class="rounded-right" style="@SetSelectedIndicatorsStyle()">
                <a class="nav-link" href="#3b" data-toggle="tab" style="color:#2c2b30" @onclick="@(() => SelectCurrentView(CurrentDetailsView.Indicators))">Indicators</a>
            </li>
        </ul>
        <SpinLoader IsLoading="@(_priceHistory == null)">
            <LoadingTemplate>
                <div class="d-flex"  style="height: 70vh">
                    <TimedLoader ShowDelay="500" />
                </div>
            </LoadingTemplate>
            <ContentTemplate>
                <div class="tab-content clearfix rounded shadow-lg">
                    <div class="tab-pane rounded @((_currentView == CurrentDetailsView.Table)? "active":"")" id="1b">
                        <CascadingValue Value="_priceHistory.Take((int)_currentQuantity)">
                            @if (CurrentDetailsView.Table == _currentView)
                            {
                                <DetailsTable />
                            }
                        </CascadingValue>
                    </div>
                    <div class="tab-pane rounded @((_currentView == CurrentDetailsView.Chart)? "active":"")" id="2b" style="display: inline-block;">
                        <CascadingValue Value="@_priceHistory.Take((int)_currentQuantity)">
                            @if (CurrentDetailsView.Chart == _currentView)
                            {
                                <DetailsChart/>
                            }
                        </CascadingValue>
                    </div>

                    <div class="tab-pane rounded @((_currentView == CurrentDetailsView.Indicators)? "active":"")" id="3b" style="display: inline-block;">
                        <CascadingValue Value="_priceHistory" Name="PriceHistory">
                            <CascadingValue Value="_currentQuantity" Name="PaginationQuantity">
                                @if (CurrentDetailsView.Indicators == _currentView)
                                {
                                    <DetailsIndicators />
                                }
                            </CascadingValue>
                        </CascadingValue>
                    </div>
                </div>
            </ContentTemplate>
        </SpinLoader>
    </div>

</div>

@code {

    private const int ExtraAmount = 50;

    private IEnumerable<KlineVO> _priceHistory { get; set; }

    private CurrentDetailsView _currentView = CurrentDetailsView.Chart;
    private KlineInterval _klineInterval = KlineInterval.OneDay;
    private PaginationQuantity _currentQuantity = PaginationQuantity.Fifty;
    private DetailsDataSource _dataSource = DetailsDataSource.API;

    private int _totalPageQuantity;
    private int _currentPage = 1;

    private bool _isRequestRunning = false;

    private readonly Dictionary<KlineInterval, string> KlineDictionary = new Dictionary<KlineInterval, string>()
{
        { KlineInterval.FiveMinutes, "5 min" },
        { KlineInterval.FifteenMinutes, "15 min" },
        { KlineInterval.OneHour, "1h" },
        { KlineInterval.TwoHour, "2h" },
        { KlineInterval.FourHour, "4h" },
        { KlineInterval.TwelveHour, "12h" },
        { KlineInterval.OneDay, "1d" },
    };

    [Parameter]
    public string Symbol { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await RefreshDetailsView();
    }

    private async Task RefreshDetailsView()
    {
        if (!_isRequestRunning)
        {
            _priceHistory = null;
            _isRequestRunning = true;

            var response = await Http.GetAsync($"api/details/{Symbol}?interval={_klineInterval}&page={_currentPage}&quantity={_currentQuantity}&datasource={_dataSource}&extraamount={ExtraAmount}");

            if (response.IsSuccessStatusCode)
            {
                _totalPageQuantity = int.Parse(response.Headers.GetValues("quantity").First());
                var jsonString = await response.Content.ReadAsStringAsync();
                _priceHistory = JsonSerializer.Deserialize<IEnumerable<KlineVO>>(jsonString, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            }
            else
            {
                _totalPageQuantity = 1;
                _priceHistory = new List<KlineVO>();
            }

            _isRequestRunning = false;
        }

        StateHasChanged();

    }

    private async Task SelectKlineInterval(KlineInterval klineInterval)
    {
        _klineInterval = klineInterval;

        await RefreshDetailsView();
    }

    private void SelectCurrentView(CurrentDetailsView currentDetailsView)
    {
        _currentView = currentDetailsView;
    }

    private async Task SelectDataSource(DetailsDataSource detailsDataSource)
    {
        _dataSource = detailsDataSource;
        _currentPage = 1;

        await RefreshDetailsView();
    }

    private async Task SelectPage(int page)
    {
        _currentPage = page;

        await RefreshDetailsView();
    }

    private async Task SelectQuantity(PaginationQuantity quantity)
    {
        _currentPage = 1;
        _currentQuantity = quantity;

        await RefreshDetailsView();
    }

    private string PointerEventsStyle()
    {
        return _isRequestRunning ? "pointer-events: none;" : null;
    }

    private string SetSelectedTableStyle()
    {
        return _currentView == CurrentDetailsView.Table ? "background-color: #F58F7C;" : "background-color: #f8ada0";
    }

    private string SetSelectedChartStyle()
    {
        return _currentView == CurrentDetailsView.Chart ? "background-color: #F58F7C;" : "background-color: #f8ada0";
    }

    private string SetSelectedIndicatorsStyle()
    {
        return _currentView == CurrentDetailsView.Indicators ? "background-color: #F58F7C;" : "background-color: #f8ada0";
    }
}
