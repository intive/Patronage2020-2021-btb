@page "/editprofile"
@using Client.Pages.Dto
@using Client.Models
@using Newtonsoft.Json
@using System.Net.Http
@using System.Text
@using BTB.Client.Models.Validation
@inject NavigationManager NavigationManager
@inject ICustomHttpClient Http
@inject IRefreshRequestsService refreshService

<div class="rounded shadow-lg white-padding">
    <SpinLoader IsLoading="@_processingHttpRequests">
        <LoadingTemplate>
            <div class="d-flex" style="height: 75vh">
                <TimedLoader ShowDelay="500" />
            </div>
        </LoadingTemplate>
        <ContentTemplate>
            <div class="container">
                <div class="text-center">
                    <h3>Edit Profile</h3>
                </div>

                <EditForm Model="@_formModel" OnValidSubmit="HandleValidSubmitAsync">
                    <FluentValidator Validator="_validator" />

                    <div class="form-group row">
                        <label class="col-sm-3 col-form-label" for="username">Username</label>
                        <div class="col-sm-9">
                            <InputText type="text" class="form-control" id="username" placeholder="Enter username"
                                       @bind-Value="@_formModel.Username"></InputText>
                            <small id="usernameHelp" class="form-text text-muted">A nickname visible to other users.</small>
                            <ValidationMessage For="@(()=>_formModel.Username)" />
                        </div>
                    </div>

                    <div class="form-group row">
                        <label class="col-sm-3 col-form-label" for="profileBio">Profile Bio</label>
                        <div class="col-sm-9">
                            <textarea class="form-control" id="profileBio" rows="3" maxlength="255" placeholder="Type here..."
                                      @bind="_formModel.ProfileBio" @bind:event="oninput"></textarea>
                            <small id="profileBioHelp" class="form-text text-muted">Characters left: @(255 - _formModel.ProfileBio.Length)</small>
                            <ValidationMessage For="@(()=>_formModel.ProfileBio)" />
                        </div>
                    </div>

                    <div class="form-group row">
                        <label class="col-sm-3 col-form-label" for="favouritePair">Your favourite trading pair</label>
                        <div class="col-sm-9">
                            <InputSelect @bind-Value="@_formModel.FavouriteTradingPair" class="form-control" id="favouritePair">
                                @foreach (var symbolPair in _symbolPairs)
                                {
                                    <option value="@symbolPair">@symbolPair</option>
                                }
                            </InputSelect>
                        </div>
                    </div>

                    <div class="row">
                        <p class="col-sm-3 col-form-label"></p>
                        <div class="col-sm-9">
                            <div class="row">
                                <div class="col"><button class="btn btn-primary" type="submit">Submit changes</button></div>
                                <div class="col"><a class="btn btn-danger" href="/userprofile">Discard changes</a></div>
                            </div>
                        </div>
                    </div>
                </EditForm>
            </div>
            <div class="container" style="margin-top:100px">
                <div class="row">
                    <p class="col-sm-3 col-form-label" for="profileBio">Password management</p>
                    <div class="col-sm-9">
                        <a class="btn btn-success" href="changepassword">Change password</a>
                    </div>
                </div>
            </div>
        </ContentTemplate>
    </SpinLoader>
</div>

@code {

    private UserProfileInfoDto _userProfileInfo = null;
    private bool _processingHttpRequests = true;
    private UserProfileInfoFormModel _formModel = null;
    private UserProfileInfoFormModelValidator _validator = new UserProfileInfoFormModelValidator();
    private IList<string> _symbolPairs = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        _formModel = new UserProfileInfoFormModel()
        {
            Username = "",
            ProfileBio = "",
            FavouriteTradingPair = ""
        };

        var userProfileResponse = await Http.GetAsync($"api/userprofile");
        if (userProfileResponse.IsSuccessStatusCode)
        {
            var jsonString = await userProfileResponse.Content.ReadAsStringAsync();
            _userProfileInfo = JsonConvert.DeserializeObject<UserProfileInfoDto>(jsonString);
            _formModel.Username = _userProfileInfo.Username;
            _formModel.ProfileBio = _userProfileInfo.ProfileBio ?? "";
            _formModel.FavouriteTradingPair = _userProfileInfo.FavouriteTradingPair ?? "";
        }

        var symbolPairsResponse = await Http.GetAsync("api/system/symbolpairs");
        if (symbolPairsResponse.IsSuccessStatusCode)
        {
            var jsonString = await symbolPairsResponse.Content.ReadAsStringAsync();
            _symbolPairs = JsonConvert.DeserializeObject<IList<string>>(jsonString);
        }

        _processingHttpRequests = false;
    }

    private async Task HandleValidSubmitAsync()
    {
        var httpRequestContent = new StringContent(JsonConvert.SerializeObject(_formModel), Encoding.UTF8, "application/json");
        HttpResponseMessage response;
        if (_userProfileInfo != null)
        {
            response = await Http.PutAsync($"api/userprofile", httpRequestContent);
        }

        await refreshService.RequestRefreshAsync();
        NavigationManager.NavigateTo("/userprofile");
    }
}
