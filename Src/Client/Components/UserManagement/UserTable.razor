@using BTB.Domain.ValueObjects;
@using BTB.Client.Models;
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@using System.Text;
@inject HttpClient Http
@inject Blazored.Modal.Services.IModalService Modal

<style type="text/css">
    #table-users th {
        padding: 0.2em;
        vertical-align: middle;
        text-align: center;
    }

    #table-users td {
        padding: 0.2em;
        vertical-align: middle;
        text-align: center;
    }
</style>


@if (_errorOccured)
{
    <div class="validation-message text-center" style="font-size:14px; margin-bottom:10px">@_errorMessage</div>
}

<table id="table-users" class="table">
    <thead>
        <tr>
            <th rowspan="2">User ID</th>
            <th rowspan="2">Username</th>
            <th rowspan="2" style="border-right: ridge thin;">Email</th>
            <th colspan="2" style="border-bottom: none;">Roles</th>
        </tr>
        <tr>
            <th style="border-top: none;">Admin</th>
            <th style="border-top: none;">User</th>
        </tr>
    </thead>
    <tbody>
        @foreach (ApplicationUserVO user in _users)
        {
            <tr>
                <td>@user.Id</td>
                <td>@user.UserName</td>
                <td style="border-right: ridge thin;">@user.Email</td>
                @foreach (string role in _roles)
                {
                    @if (user.Roles.Contains(role))
                    {
                        <td>
                            <button class="btn btn-link" @onclick="() => TakeRole(user, role)">
                                <span class="oi oi-check" style="color:limegreen"></span>
                            </button>
                        </td>
                    }
                    else
                    {
                        <td>
                            <button class="btn btn-link" @onclick="() => AddRole(user, role)">
                                <span class="oi oi-x" style="color:red"></span>
                            </button>
                        </td>
                    }
                }
            </tr>
        }
    </tbody>
</table>



@code {

    [CascadingParameter(Name = "Users")]
    private List<ApplicationUserVO> _users { get; set; }

    [CascadingParameter(Name = "Roles")]
    private List<string> _roles { get; set; }

    private string _errorMessage { get; set; }
    private bool _errorOccured { get; set; } = false;


    private async Task TakeRole(ApplicationUserVO user, string role)
    {
        var takeRoleModel = new TakeRoleFromUserModel { UserName = user.UserName, Role = role };
        var httpRequestContent = new StringContent(JsonConvert.SerializeObject(takeRoleModel), Encoding.UTF8, "application/json");

        HttpResponseMessage response = await Http.PutAsync($"api/UserManagement/TakeRole", httpRequestContent);
        await ProcessResponse(response, user);
    }

    private async Task AddRole(ApplicationUserVO user, string role)
    {
        var giveRoleModel = new GiveRoleToUserModel { UserName = user.UserName, Role = role };
        var httpRequestContent = new StringContent(JsonConvert.SerializeObject(giveRoleModel), Encoding.UTF8, "application/json");

        HttpResponseMessage response = await Http.PutAsync($"api/UserManagement/GiveRole", httpRequestContent);
        await ProcessResponse(response, user);
    }

    private async Task ProcessResponse(HttpResponseMessage response, ApplicationUserVO user)
    {
        var jsonString = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            _errorOccured = false;

            var result = JsonConvert.DeserializeObject<UserRolesVO>(jsonString);

            int index = _users.FindIndex(u => u.Id == user.Id);
            if (index != -1)
            {
                _users[index].Roles = result.Roles;
            }

            if (result.LogoutRequired == true)
            {
                var parameters = new ModalParameters();
                var options = new ModalOptions()
                {
                    DisableBackgroundCancel = true,
                    HideHeader = false,
                    HideCloseButton = true
                };

                Modal.Show<ChangedYourOwnRoleInfo>("Your role has been changed successfully", parameters, options);
            }
        }
        else
        {
            _errorOccured = true;

            var myJObject = JObject.Parse(jsonString);
            _errorMessage = myJObject.SelectToken("errorMessage").Value<string>();
        }
    }



}
