@page "/changepassword"
@using BTB.Client.Models
@using BTB.Client.Models.Validation
@using BTB.Client.Components.UserProfile
@inject ICustomHttpClient Http
@inject Blazored.Modal.Services.IModalService Modal


<div class="rounded shadow-lg white-padding">
    <EditForm Model="@_formModel" OnValidSubmit="HandleSubmitAsync" OnInvalidSubmit="HandleInvalidSubmit">
        <FluentValidator Validator="_validator" />

        <div class="text-center">
            <h3>Change Password</h3>
        </div>
        <br />
        <div class="form-group row">
            <label for="currentPassword" class="col-sm-3 col-form-label">Current password</label>
            <div class="col-sm-9">
                <InputText @bind-Value="_formModel.CurrentPassword" type="password" class="form-control" id="currentPassword" placeholder="Current password" />
                <ValidationMessage For="@(() => _formModel.CurrentPassword)" style="margin-top:0px" />
            </div>
        </div>

        <div class="form-group row">
            <label for="newPassword" class="col-sm-3 col-form-label">New password</label>
            <div class="col-sm-9">
                <InputText @bind-Value="_formModel.NewPassword" type="password" class="form-control" id="newPassword" placeholder="New password" />
                <ValidationMessage For="@(() => _formModel.NewPassword)" style="margin-top:0px" />
            </div>
        </div>

        <div class="form-group row">
            <label for="newPasswordConfirmation" class="col-sm-3 col-form-label">New password confirmation</label>
            <div class="col-sm-9">
                <InputText @bind-Value="_formModel.NewPasswordConfirmation" type="password" class="form-control" id="newPasswordConfirmation" placeholder="New password confirmation" />
                <ValidationMessage For="@(() => _formModel.NewPasswordConfirmation)" style="margin-top:0px" />
            </div>
        </div>
        @if (_errorOccured)
        {
            <div class="validation-message text-center" style="font-size:14px; margin-bottom:10px">@_changePasswordError</div>
        }
        <div class="justify-content-around row">
            <div class="text-center">
                <button type="submit" class="btn btn-primary">Confirm</button>
            </div>
        </div>
    </EditForm>
</div>

@code {

    private ChangePasswordFormModelValidator _validator = new ChangePasswordFormModelValidator();
    private ChangePasswordFormModel _formModel = new ChangePasswordFormModel();

    private string _changePasswordError = "Current password does not match.";
    private bool _errorOccured = false;


    private void HandleInvalidSubmit()
    {
        _errorOccured = false;
    }

    private async Task HandleSubmitAsync()
    {
        try
        {
            await Http.SendJsonAsync(HttpMethod.Post, $"/api/authorize/changepassword", _formModel);
            _errorOccured = false;

            var parameters = new ModalParameters();
            var options = new ModalOptions()
            {
                DisableBackgroundCancel = true,
                HideHeader = true,
                HideCloseButton = true,
            };

            Modal.Show<ChangePasswordSuccessInfo>("Subscription", parameters, options);
        }
        catch (Exception)
        {
            _errorOccured = true;
        }
    }
}
