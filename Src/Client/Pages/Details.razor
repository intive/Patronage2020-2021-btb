@page "/details/{symbol}"

@using BTB.Domain.Entities
@using Binance.Net.Objects
@using System.Net.Http;
@using System.Net;
@using Newtonsoft.Json;
@inject HttpClient Http

<h1>Details of @Symbol</h1>

@if (_priceHistory == null && _requestFailed == false)
{
    <p><em>Loading...</em></p>
}
else if (_requestFailed == true)
{
    <br />
    <h3><em style="color: red;">@_errorMessage</em></h3>
    <a href="/">Return to Dashboard</a>
}
else
{
    <br />

    <div class="btn-toolbar" role="toolbar" aria-label="Toolbar with button groups">
        <div class="btn-group mr-2" role="group" aria-label="Minutes group">
            <button @onclick=@(async () => await RefreshDetailsList(KlineInterval.OneMinute)) type="button" class="btn btn-primary">1 min</button>
            <button @onclick=@(async () => await RefreshDetailsList(KlineInterval.FifteenMinutes)) type="button" class="btn btn-primary">15 min</button>
        </div>
        <div class="btn-group mr-2" role="group" aria-label="Hours group">
            <button @onclick=@(async () => await RefreshDetailsList(KlineInterval.OneHour)) type="button" class="btn btn-primary">1h</button>
            <button @onclick=@(async () => await RefreshDetailsList(KlineInterval.TwoHour)) type="button" class="btn btn-primary">2h</button>
            <button @onclick=@(async () => await RefreshDetailsList(KlineInterval.FourHour)) type="button" class="btn btn-primary">4h</button>
            <button @onclick=@(async () => await RefreshDetailsList(KlineInterval.TwelveHour)) type="button" class="btn btn-primary">12h</button>
        </div>
        <div class="btn-group" role="group" aria-label="Days group">
            <button @onclick=@(async () => await RefreshDetailsList(KlineInterval.OneDay)) type="button" class="btn btn-primary">1d</button>
        </div>
    </div>

    <br />

    <table class="table">
        <thead>
            <tr>
                <th>Time</th>
                <th>Price</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in _priceHistory)
            {
                <tr>
                    <td>@item.Time.AddHours(1).ToString("dd MMM yyyy, HH:mm:ss")</td>
                    <td>@Math.Round(item.Price, 6)</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<BinanceSymbolPriceInTime> _priceHistory { get; set; }

    private bool _requestFailed = false;

    private string _errorMessage;

    [Parameter]
    public string Symbol { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await RefreshDetailsList(KlineInterval.OneMinute);
    }

    private async Task RefreshDetailsList(KlineInterval interval)
    {
        var response = await Http.GetAsync($"api/details/{Symbol}?interval={interval}");
        var jsonString = await response.Content.ReadAsStringAsync();

        if (response.StatusCode == HttpStatusCode.BadRequest)
        {
            _requestFailed = true;
            _errorMessage = jsonString;
        }
        else
        {
            _priceHistory = JsonConvert.DeserializeObject<IEnumerable<BinanceSymbolPriceInTime>>(jsonString);
        }
    }

}
