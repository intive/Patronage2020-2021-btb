@using System
@using Newtonsoft.Json;
@inject IJSRuntime jsRuntime

@if (_priceHistory != null)
{
    @if (_priceHistory.Count() == 0)
    {
        <p>Could not display chart as there are not enough klines.</p>
    }
    else
    {
        <div id="chart_div" style="margin: 0 auto;"></div>
    }
}


@code {

    [CascadingParameter]
    private IEnumerable<KlineVO> _priceHistory { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var candlestick = _priceHistory.Select(p => new { time = ((DateTimeOffset)p.CloseTime).ToUnixTimeSeconds(), open = p.OpenPrice,
            high = p.HighestPrice, low = p.LowestPrice, close = p.ClosePrice });
        var candlestickJson = JsonConvert.SerializeObject(candlestick);
        await jsRuntime.InvokeVoidAsync("drawCandlestick", "chart_div", candlestickJson);
    }
}

