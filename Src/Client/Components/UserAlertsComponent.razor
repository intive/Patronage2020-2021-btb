@using BTB.Client.Pages
@using BTB.Client.Pages.Dto
@using BTB.Domain.Common.Pagination
@using BTB.Domain.Extensions
@using Newtonsoft.Json
@using System.Threading
@inject HttpClient Http
@inject Blazored.Modal.Services.IModalService Modal
@inject IJSRuntime jsRuntime
@implements IDisposable

<SpinLoader IsLoading="@_processingHttpRequest">
    <LoadingTemplate>
        <div class="d-flex" style="height: 75vh">
            <TimedLoader ShowDelay="500" />
        </div>
    </LoadingTemplate>
    <ContentTemplate>
        <div class="container w-100">
            <div class="text-center">
                <h1>My Alerts</h1>
            </div>

            @if (_alertCount > 0)
            {
                <div class="mb-2 d-flex flex-row justify-content-between">
                    <div class="d-inline-block">
                        <div class="btn-group" role="group">
                            @foreach (var value in Enum<PaginationQuantity>.GetValues())
                            {
                                <button style="@PointerEventsStyle()" class="btn btn-primary" type="button"
                                        @onclick="@(async () => await SelectedQuantityAsync(value))">
                                    @((int)value)
                                </button>
                            }
                        </div>
                    </div>

                    <Pagination TotalPagesQuantity="@_totalPageQuantity"
                                CurrentPage="@_currentPage"
                                Radius="2"
                                SelectedPage="SelectedPageAsync"
                                PointerEventsStyle="@PointerEventsStyle()">
                    </Pagination>
                </div>

                @for (int i = 0; i < _alertCount; i++)
                {
                    int alertIndex = i;
                    var alert = _alerts[alertIndex];

                    <div class="card mb-2">
                        <div class="card-header d-flex flex-row justify-content-between" @onclick="() => ToggleCollapse(alertIndex)">
                            <div>
                                <NavLink class="btn btn-link" href="@($"/details/{alert.Symbol}")" @onclick:stopPropagation="true">
                                    @alert.Symbol
                                </NavLink>
                            </div>

                            <div>
                                <button class="btn btn-link" @onclick="() => ShowUpdateAlertModal(alert)" @onclick:stopPropagation="true">
                                    <span class="oi oi-pencil" aria-hidden="true" />
                                </button>

                                <button class="btn btn-link" @onclick="async () => await DeleteAlertAsync(alert.Id)" @onclick:stopPropagation="true">
                                    <span class="oi oi-x" aria-hidden="true" />
                                </button>
                            </div>
                        </div>

                        <div class="@(_collapse[alertIndex] ? "collapse" : "")">
                            <div class="card-body">

                                <div class="row">
                                    <h5 class="col-12 col-lg-4">Condition:</h5>
                                    <p class="col-12 col-lg-8">@alert.Condition</p>
                                </div>

                                <div class="row">
                                    <h5 class="col-12 col-lg-4">Value Type:</h5>
                                    <p class="col-12 col-lg-8">@alert.ValueType</p>
                                </div>

                                <div class="row">
                                    <h5 class="col-12 col-lg-4">Value:</h5>
                                    <p class="col-12 col-lg-8">@alert.Value</p>
                                </div>

                                @if (alert.SendEmail)
                                {
                                    <div class="row">
                                        <h5 class="col-12 col-lg-4">Message to @alert.Email:</h5>
                                        <p class="col-12 col-lg-8">@alert.Message</p>
                                    </div>
                                }
                                else
                                {
                                    <h5>This alert has no email notification.</h5>
                                }
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="text-center">
                    <h4>You have no alerts. Go to the <a href="/">dashboard</a> and create some!</h4>
                </div>
            }
        </div>
    </ContentTemplate>
</SpinLoader>

@code {
    private int _totalPageQuantity;
    private int _currentPage = 1;
    private int _currentQuantity = 10;
    private bool _processingHttpRequest = false;
    private int _alertCount = 0;
    private readonly CancellationTokenSource _tokenSource = new CancellationTokenSource();
    private IList<bool> _collapse = null;
    private IList<AlertDto> _alerts = new List<AlertDto>();

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private void ToggleCollapse(int alertIndex)
    {
        _collapse[alertIndex] = !_collapse[alertIndex];
    }

    private async Task LoadDataAsync()
    {
        if (!_processingHttpRequest)
        {
            _processingHttpRequest = true;

            var response = await Http.GetAsync($"api/alerts?page={_currentPage}&quantity={_currentQuantity}", _tokenSource.Token);

            if (_tokenSource.Token.IsCancellationRequested)
            {
                return;
            }

            if (response.IsSuccessStatusCode)
            {
                _totalPageQuantity = int.Parse(response.Headers.GetValues("quantity").First());
                var jsonString = await response.Content.ReadAsStringAsync();
                _alerts = JsonConvert.DeserializeObject<IList<AlertDto>>(jsonString);
            }

            _collapse = new List<bool>();
            _alertCount = _alerts.Count;
            for (int i = 0; i < _alertCount; i++)
            {
                _collapse.Add(true);
            }

            _processingHttpRequest = false;
        }
    }

    private async Task SelectedPageAsync(int page)
    {
        _currentPage = page;
        await LoadDataAsync();
    }

    private async Task SelectedQuantityAsync(PaginationQuantity quantity)
    {
        _currentPage = 1;
        _currentQuantity = (int)quantity;
        await LoadDataAsync();
    }

    private string PointerEventsStyle()
    {
        return _processingHttpRequest ? "pointer-events: none;" : null;
    }

    private void ShowUpdateAlertModal(AlertDto alert)
    {
        var parameters = new ModalParameters();
        var options = new ModalOptions()
        {
            HideCloseButton = true,
            HideHeader = true
        };

        parameters.Add("ShouldUpdateAlert", true);
        parameters.Add("Alert", alert);
        parameters.Add("OnModalClosedAsync", new Func<Task>(async () => { await LoadDataAsync(); this.StateHasChanged(); }));
        Modal.Show<AlertSubscription>("Subscribtion", parameters, options);
    }

    private async Task DeleteAlertAsync(int alertId)
    {
        var confirmed = await jsRuntime.InvokeAsync<bool>("confirm", "Are you sure want to delete this alert?");
        if (confirmed)
        {
            await Http.DeleteAsync($"api/alerts/{alertId}");
            await LoadDataAsync();
        }
    }

    public void Dispose()
    {
        _tokenSource.Cancel();
    }
}
