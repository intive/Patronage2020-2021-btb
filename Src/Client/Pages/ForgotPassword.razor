@page "/forgotpassword"

@layout LoginLayout

@inject HttpClient Http

@implements IDisposable

@using BTB.Client.Models
@using BTB.Client.Models.Validation

<div class="card shadow-lg" style="height: @(_height)px">
    <div class="card-body">
        <h5 class="font-weight-normal text-center">Reset Password</h5>

        <label class="validation-message text-info" style="margin-top: 0rem; margin-bottom: 0.5rem;">@_infoMessage</label>

        <EditForm class="form-signin" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInvalidSubmit"
                  EditContext="_editContext">
            <FluentValidator Validator="_validator" />

            <div class="input-group form-group">
                <div class="input-group-prepend">
                    <span class="input-group-text"><i class="oi oi-envelope-closed"></i></span>
                </div>
                <InputText type="email" id="inputEmail" class="form-control" placeholder="Email"
                           @bind-Value="_formModel.Email" />
            </div>
            <ValidationMessage For="@(() => _formModel.Email)" />

            <div class="form-group">
                <input type="submit" value="Reset password" class="btn btn-lg btn-block login_btn">
            </div>

            <hr class="my-3">

            <div class="d-flex justify-content-center links">
                <NavLink href="login">
                    Go back
                </NavLink>
            </div>
            
        </EditForm>
    </div>
</div>

@code
{
    private const int MessageHeight = 24;

    private int _baseHeight = 235;
    private int _height { get; set; }

    private string _infoMessage { get; set; }

    private ForgotPasswordModel _formModel { get; set; }
    private ForgotPasswordModelValidator _validator { get; set; }

    private EditContext _editContext { get; set; }

    public ForgotPassword()
    {
        _height = _baseHeight;
        _infoMessage = string.Empty;

        _formModel = new ForgotPasswordModel();
        _validator = new ForgotPasswordModelValidator();

        _editContext = new EditContext(_formModel);

        _editContext.OnFieldChanged += HandleFieldChanged;
        _editContext.OnValidationStateChanged += HandleValidationStateChanged;
    }

    private async Task OnValidSubmit()
    {
        try
        {
            await Http.SendJsonAsync(HttpMethod.Post,
                $"/api/authorize/sendresetlink", _formModel);
        }
        catch
        {
            // TODO: Handle Exception
        }
        finally
        {
            _infoMessage = "Password reset link has been sent.";

            _baseHeight += MessageHeight;
            _height += MessageHeight;
        }
    }

    private void HandleFieldChanged(object sender, FieldChangedEventArgs e)
    {
        HandleChanged();

        StateHasChanged();
    }

    private void HandleValidationStateChanged(object sender, ValidationStateChangedEventArgs e)
    {
        HandleChanged();

        StateHasChanged();
    }

    private void HandleChanged()
    {
        var errorsCount = _editContext.GetValidationMessages().Count();

        _height = _baseHeight + MessageHeight * errorsCount;
    }

    public void OnInvalidSubmit()
    {
        if (_infoMessage != string.Empty)
        {
            _baseHeight -= MessageHeight;
            _height -= MessageHeight;
        }

        _infoMessage = string.Empty;
    }

    public void Dispose()
    {
        _editContext.OnFieldChanged -= HandleFieldChanged;
        _editContext.OnValidationStateChanged -= HandleValidationStateChanged;
    }
}
