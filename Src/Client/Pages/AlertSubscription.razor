@using BTB.Client.Models;
@using BTB.Client.Pages.Dto;
@using FluentValidation;
@using BTB.Client.Models.Validation;
@inject HttpClient Http
@inject Blazored.Modal.Services.IModalService Modal

<EditForm Model="@_formModel" OnSubmit="HandleSubmitAsync">
    <FluentValidator Validator="_validator"/>

    <h4>Create Alert on @_alertDto.Symbol</h4>

    <div class="form-group row mb-0">
        <label for="condition" class="col col-form-label">Select condition:</label>
        <div class="col">
            <InputSelect @bind-Value="_formModel.Condition" class="form-control form-control-sm" id="condition">
                <option disabled selected> -- select -- </option>
                <option value="crossing">Crossing</option>
            </InputSelect>
        </div>
    </div>
    <ValidationMessage For="@(()=>_formModel.Condition)" class="text-center mb-1" style="font-size:14px; margin-bottom:10px" />

    <div class="form-group row mb-0">
        <label for="valueType" class="col col-form-label">Select value type:</label>
        <div class="col">
            <InputSelect @bind-Value="_formModel.ValueType" class="form-control form-control-sm" id="valueType">
                <option disabled selected> -- select-- </option>
                <option value="volume">Volume</option>
                <option value="price">Price</option>
                <option value="tradeCount">Trade Count</option>
            </InputSelect>
        </div>
    </div>
    <ValidationMessage For="@(()=>_formModel.ValueType)" class="text-center mb-1" style="font-size:14px; margin-bottom:10px" />

    <div class="form-group row mb-0">
        <label for="value" class="col-4 col-form-label">Value:</label>
        <div class="col-8">
            <InputNumber @bind-Value="_formModel.Value" class="form-control form-control-sm" id="value" />
        </div>
    </div>
    <ValidationMessage For="@(()=>_formModel.Value)" class="text-center mb-1" style="font-size:14px; margin-bottom:10px" />

    <h4>Alert Actions:</h4>

    <div class="form-group row mb-0">
        <label for="sendEmail" class="col-7">Send Email:</label>
        <div class="col-5">
            <InputCheckbox @bind-Value="_formModel.SendEmail" id="sendEmail" />
        </div>
    </div>

    <div class="form-group row mb-0">
        <label for="email" class="col-4 col-form-label">Email:</label>
        <div class="col-8">
            <InputText @bind-Value="_formModel.Email" type="email" class="form-control form-control-sm" id="email" placeholder="Email" disabled="@(!_formModel.SendEmail)" />
        </div>
    </div>
    <ValidationMessage For="@(()=>_formModel.Email)" style="font-size:14px; margin-bottom:10px" />

    <div class="form-group row mb-1">
        <label for="message" class="col-4 col-form-label">Message:</label>
        <div class="col-8">
            <InputTextArea @bind-Value="_formModel.Message" class="form-control form-control-sm" id="message" disabled="@(!_formModel.SendEmail)" />
        </div>
    </div>
    <ValidationMessage For="@(()=>_formModel.Message)" style="font-size:14px; margin-bottom:10px" />

    <DataAnnotationsValidator />

    <div class="text-right">
        <button class="btn btn-danger btn-sm" type="reset" @onclick="CancelModal">Cancel</button>
        <button class="btn btn-success btn-sm" type="submit">Confirm</button>
    </div>

</EditForm>

@code {
    [CascadingParameter]
    public ModalParameters Parameters { get; set; }
    private bool _shouldUpdateAlert = false;
    private AlertDto _alertDto = null;
    private AlertFormModel _formModel = null;
    private Func<Task> _onModalClosedAsync = null;
    private AlertFormModelValidator _validator = new AlertFormModelValidator();

    protected override void OnInitialized()
    {
        _shouldUpdateAlert = Parameters.Get<bool>("ShouldUpdateAlert");
        _alertDto = Parameters.Get<AlertDto>("Alert");
        _onModalClosedAsync = Parameters.Get<Func<Task>>("OnModalClosedAsync");

        _formModel = new AlertFormModel()
        {
            Symbol = _alertDto.Symbol,
            Condition = _alertDto.Condition,
            ValueType = _alertDto.ValueType,
            Value = _alertDto.Value,
            SendEmail = _alertDto.SendEmail,
            Email = _alertDto.Email,
            Message = _alertDto.Message
        };
    }

    private async Task HandleSubmitAsync(EditContext editContext)
    {
        if (!_formModel.SendEmail)
        {
            _formModel.Email = null;
            _formModel.Message = null;
        }

        if (editContext.Validate())
        {
            if (_shouldUpdateAlert)
            {
                await SendUpdateAlertRequestAsync(_alertDto.Id);
            }
            else
            {
                await SendCreateAlertRequestAsync();
            }

            if (_onModalClosedAsync != null)
            { 
                await _onModalClosedAsync();
            }

            Modal.Close();
        }
    }

    private async Task SendCreateAlertRequestAsync()
    {
        await Http.SendJsonAsync(HttpMethod.Post, "/api/alerts", _formModel);
    }

    private async Task SendUpdateAlertRequestAsync(int alertId)
    {
        await Http.SendJsonAsync(HttpMethod.Put, $"/api/alerts/{alertId}", _formModel);
    }

    private void CancelModal()
    {
        Modal.Cancel();
    }
}
