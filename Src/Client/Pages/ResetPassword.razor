@page "/resetpassword"
@using BTB.Client.Models
@using BTB.Client.Models.Validation
@using BTB.Client.Extensions
@inject ICustomHttpClient Http
@inject NavigationManager NavigationManager
@layout LoginLayout
<div class="rounded shadow-lg white-padding">
    <EditForm Model="@_formModel" OnValidSubmit="HandleSubmitAsync" OnInvalidSubmit="HandleInvalidSubmit">
        <FluentValidator Validator="_validator" />

        <div class="text-center">
            <h3>Reset Password</h3>
        </div>
        <br />
        <div class="form-group row">
            <label for="password" class="col-sm-4 col-form-label">Password</label>
            <div class="col-sm-8">
                <InputText @bind-Value="_formModel.Password" type="password" class="form-control form-control-sm" id="password" placeholder="Password" />
                <ValidationMessage For="@(() => _formModel.Password)" style="font-size:14px; margin-bottom:10px" />
            </div>
        </div>

        <div class="form-group row">
            <label for="passwordConfirmation" class="col-sm-4 col-form-label">Password confirmation</label>
            <div class="col-sm-8">
                <InputText @bind-Value="_formModel.ConfirmPassword" type="password" class="form-control form-control-sm" id="passwordConfirmation" placeholder="Password Confirmation" />
                <ValidationMessage For="@(() => _formModel.ConfirmPassword)" style="font-size:14px; margin-bottom:10px" />
            </div>
        </div>

        <div class="text-center">
            @if (_resetPassword)
            {
                <p style="color:green">@_confirmInfo</p>
                <NavLink href="/login">Go to login page</NavLink>
            }
            else if (_exceptionOccured)
            {
                <p style="color:red">@_errorInfo</p>
            }
        </div>

        <div class="justify-content-around row" style="margin-top:20px;">
            <div class="text-center">
                <button type="submit" class="btn btn-primary">Submit</button>
            </div>
        </div>
    </EditForm>
</div>

@code {

    private string _confirmInfo = "Password has been changed.";
    private string _errorInfo = "Password change failed.";

    private string _email = null;
    private string _token = null;

    private bool _resetPassword = false;
    private bool _exceptionOccured = false;

    private ResetPasswordModel _formModel = new ResetPasswordModel();
    private ResetPasswordModelValidator _validator = new ResetPasswordModelValidator();

    protected override void OnInitialized()
    {
        NavigationManager.TryGetQueryString<string>("email", out _email);
        NavigationManager.TryGetQueryString<string>("token", out _token);

        _formModel.Email = _email;
        _formModel.Token = _token.Replace(" ", "+");
    }

    public async Task HandleSubmitAsync()
    {
        try
        {
            await Http.SendJsonAsync(HttpMethod.Post, $"/api/authorize/resetpassword", _formModel);
            _resetPassword = true;
            _exceptionOccured = false;
        }
        catch (Exception)
        {
            _exceptionOccured = true;
            _resetPassword = false;
        }
    }

    private void HandleInvalidSubmit()
    {
        _resetPassword = false;
        _exceptionOccured = false;
    }

}
