@page "/details/{symbol}"

@using BTB.Domain.Common
@using Binance.Net.Objects
@using System.Net.Http;
@using System.Net;
@using Newtonsoft.Json;
@using BTB.Domain.ValueObjects
@using BTB.Client.Pages.Details.Enums
@using BTB.Domain.Common.Pagination
@using BTB.Domain.Extensions
@inject HttpClient Http

<h1>Details of @Symbol</h1>

@if (_priceHistory == null && _requestFailed == false)
{
    <p><em>Loading...</em></p>
}
else if (_requestFailed == true)
{
    <br />
    <h3><em style="color: red;">@_errorMessage</em></h3>
    <a href="/">Return to Dashboard</a>
}
else
{
    <br />
    <SpinLoader IsLoading="@_processingHttpRequest">
        <LoadingTemplate>
            <div class="d-flex" style="height: 75vh">
                <TimedLoader ShowDelay="500" />
            </div>
        </LoadingTemplate>
        <ContentTemplate>

            <div class="btn-toolbar" role="toolbar" aria-label="Toolbar with button groups">
                <div class="btn-group mr-2" role="group" aria-label="Time group">
                    <a href="#" role="button" class="btn btn-success btn-xs" id="label-btn" aria-disabled="true">Kline interval</a>
                    <button @onclick=@(async () => { _klineInterval = KlineInterval.FiveMinutes; await RefreshDetailsList();  }) type="button" class="btn btn-primary">5 min</button>
                    <button @onclick=@(async () => { _klineInterval = KlineInterval.FifteenMinutes; await RefreshDetailsList();  }) type="button" class="btn btn-primary">15 min</button>
                    <button @onclick=@(async () => { _klineInterval = KlineInterval.OneHour; await RefreshDetailsList();  }) type="button" class="btn btn-primary">1h</button>
                    <button @onclick=@(async () => { _klineInterval = KlineInterval.TwoHour; await RefreshDetailsList();  }) type="button" class="btn btn-primary">2h</button>
                    <button @onclick=@(async () => { _klineInterval = KlineInterval.FourHour; await RefreshDetailsList();  }) type="button" class="btn btn-primary">4h</button>
                    <button @onclick=@(async () => { _klineInterval = KlineInterval.TwelveHour; await RefreshDetailsList();  }) type="button" class="btn btn-primary">12h</button>
                    <button @onclick=@(async () => { _klineInterval = KlineInterval.OneDay; await RefreshDetailsList();  }) type="button" class="btn btn-primary">1d</button>
                </div>
                <div class="btn-group mr-2" role="group" aria-label="Table Charts Indicators">
                    <a href="#" role="button" class="btn btn-success btn-xs" id="label-btn" aria-disabled="true">Current view</a>
                    <button type="button" class="btn btn-primary" @onclick="@(() => _currentView = CurrentDetailsView.Table)">Table</button>
                    <button type="button" class="btn btn-primary" @onclick="@(() => _currentView = CurrentDetailsView.Chart)">Chart</button>
                    <button type="button" class="btn btn-primary" @onclick="@(() => _currentView = CurrentDetailsView.Indicators)">Indicators</button>
                </div>
                <div class="btn-group mr-2" role="group" aria-label="Data Source">
                    <a href="#" role="button" class="btn btn-success btn-xs" id="label-btn" aria-disabled="true">Data source</a>
                    <button @onclick=@(async () => { _dataSource = DetailsDataSource.Database; await RefreshDetailsList();  }) type="button" class="btn btn-primary">@DetailsDataSource.Database</button>
                    <button @onclick=@(async () => { _dataSource = DetailsDataSource.API; await RefreshDetailsList();  }) type="button" class="btn btn-primary">@DetailsDataSource.API</button>
                </div>
            </div>

            <br />

            <div class="btn-toolbar d-inline-block mb-2" role="toolbar" aria-label="Toolbar with button groups">
                <div class="btn-group mr-2" role="group" aria-label="Quantity group">
                    <a href="#" role="button" class="btn btn-success btn-xs" id="label-btn" aria-disabled="true">Number of displayed elements</a>
                    @foreach (var value in Enum<PaginationQuantity>.GetValues())
                    {
                        <button class="btn btn-primary" type="button" @onclick="@(async () => { _paginationQuantity = value; await RefreshDetailsList(); })">@((int)value)</button>
                    }
                </div>
            </div>

            <Pagination TotalPagesQuantity="@_totalPageQuantity" CurrentPage="@_currentPage" Radius="2" SelectedPage="SelectedPage" PointerEventsStyle="@PointerEventsStyle()"></Pagination>

            <br />

            <CascadingValue Value="_priceHistory.Take(_perPage)">
                @if (CurrentDetailsView.Table == _currentView)
                {
                    <DetailsTable />
                }
            </CascadingValue>

            <CascadingValue Value="_priceHistory.Take(_perPage)">
                @if (CurrentDetailsView.Chart == _currentView)
                {
                    <DetailsChart />
                }
            </CascadingValue>

            <CascadingValue Value="_priceHistory" Name="PriceHistory">
                <CascadingValue Value="_paginationQuantity" Name="PaginationQuantity">
                    @if (CurrentDetailsView.Indicators == _currentView)
                    {
                        <DetailsIndicators />
                    }
                </CascadingValue>
            </CascadingValue>
        </ContentTemplate>
    </SpinLoader>
}

@code {

    private IEnumerable<KlineVO> _priceHistory { get; set; }

    private CurrentDetailsView _currentView = CurrentDetailsView.Table;
    private KlineInterval _klineInterval = KlineInterval.FiveMinutes;
    private PaginationQuantity _paginationQuantity = PaginationQuantity.Ten;
    private DetailsDataSource _dataSource = DetailsDataSource.API;

    private int _perPage;

    private const int AdditionalRows = 50;

    private bool _processingHttpRequest = true;
    private bool _requestFailed = false;

    private string _errorMessage;

    private int _totalPageQuantity;
    private int _currentPage = 1;
    private int _currentQuantity = 10;

    private bool _isRequestRunning = false;

    [Parameter]
    public string Symbol { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await RefreshDetailsList();
    }

    private async Task RefreshDetailsList()
    {
        _processingHttpRequest = true;
        var response = await Http.GetAsync($"api/details/{Symbol}?interval={_klineInterval}&page={1}&quantity={_paginationQuantity}&additional={AdditionalRows}&datasource={_dataSource}");
        var jsonString = await response.Content.ReadAsStringAsync();

        if (response.StatusCode == HttpStatusCode.BadRequest)
        {
            _requestFailed = true;
            _errorMessage = jsonString;
        }
        else
        {
            _priceHistory = JsonConvert.DeserializeObject<IEnumerable<KlineVO>>(jsonString);
            _perPage = (int)_paginationQuantity;
            _processingHttpRequest = false;
        }
    }

    private async Task SelectedPage(int page)
    {
        _currentPage = page;

        await RefreshDetailsList();
    }

    private string PointerEventsStyle()
    {
        return _isRequestRunning ? "pointer-events: none;" : null;
    }
}