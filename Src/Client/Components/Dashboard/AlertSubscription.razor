@using BTB.Client.Models;
@using BTB.Client.Models.Validation;
@using FluentValidation;
@inject ICustomHttpClient Http
@inject Blazored.Modal.Services.IModalService Modal

<style>
    @@media screen and (min-width: 480px) {
        #innerContainer {
            min-width: 460px
        }
    }

    .validation-message {
        font-size: 14px;
        margin-bottom: 10px;
    }
</style>

<EditForm Model="@_formModel" OnSubmit="HandleSubmitAsync">
    <FluentValidator Validator="_validator" />

    <div id="innerContainer">
        <h3>@(_shouldUpdateAlert ? "Update" : "Create") an alert on @_alertVO.SymbolPair</h3>

        <div class="form-group row mb-0">
            <label for="condition" class="col-sm-4 col-form-label">Select condition</label>
            <div class="col-sm-8">
                <InputSelect @bind-Value="_formModel.Condition" class="form-control form-control-sm" id="condition">
                    <option disabled selected>select</option>
                    <option value="Crossing">Crossing</option>
                    <option value="CrossingUp">Crossing Up</option>
                    <option value="CrossingDown">Crossing Down</option>
                    <option value="Between">Between</option>
                </InputSelect>
                <ValidationMessage For="@(()=>_formModel.Condition)" />
            </div>
        </div>

        <div class="form-group row mb-0">
            <label for="valueType" class="col-sm-4 col-form-label">Select value type</label>
            <div class="col-sm-8">
                <InputSelect @bind-Value="_formModel.ValueType" class="form-control form-control-sm" id="valueType" placeholder="">
                    <option disabled selected>select</option>
                    <option value="Price">Price</option>
                    <option value="Volume">Volume</option>
                    <option value="TradeCount" disabled>Trade Count</option>
                </InputSelect>
                <ValidationMessage For="@(()=>_formModel.ValueType)" />
            </div>
        </div>

        <div class="form-group row mb-0">
            <label for="value" class="col-sm-4 col-form-label">@(DisplayUpperValue ? "Lower Value" : "Value")</label>
            <div class="col-sm-8">
                <InputNumber @bind-Value="_formModel.Value" class="form-control form-control-sm" id="value" />
                <ValidationMessage For="@(() => _formModel.Value)" class="text-center mb-1" />
            </div>
        </div>

        @if (DisplayUpperValue)
        {
            <div class="form-group row mb-4">
                <label for="additionalValue" class="col-sm-4 col-form-label">Upper Value</label>
                <div class="col-sm-8">
                    <InputNumber @bind-Value="_formModel.AdditionalValue" class="form-control form-control-sm" id="additionalValue" />
                    <ValidationMessage For="@(() => _formModel.AdditionalValue)" class="text-center mb-1" />
                </div>
            </div>
        }

        <h3>Alert Actions:</h3>

        <div class="form-group row mb-0">
            <label for="triggerOnce" class="col-4">Only once</label>
            <div class="col-sm-8">
                <InputCheckbox @bind-Value="_formModel.TriggerOnce" id="triggerOnce" />
            </div>
        </div>

        <div class="form-group row mb-0">
            <label for="sendEmail" class="col-4">Send Notifications In Browser</label>
            <div class="col-8">
                <InputCheckbox @bind-Value="_formModel.SendInBrowser" id="sendInBrowser" />
            </div>

            <label for="sendEmail" class="col-4">Send Email</label>
            <div class="col-sm-8">
                <InputCheckbox @bind-Value="_formModel.SendEmail" id="sendEmail" />
            </div>
        </div>

        <div class="form-group row mb-0">
            <label for="email" class="col-sm-4 col-form-label">Email</label>
            <div class="col-sm-8">
                <InputText @bind-Value="_formModel.Email" type="email" class="form-control form-control-sm" id="email" placeholder="Email" disabled="@(!_formModel.SendEmail)" />
                <ValidationMessage For="@(()=>_formModel.Email)" />
            </div>
        </div>

        <div class="form-group row mb-2">
            <label for="message" class="col-sm-4 col-form-label">Message</label>
            <div class="col-sm-8">
                <InputTextArea @bind-Value="_formModel.Message" class="form-control form-control-sm" id="message" disabled="@(!_formModel.SendEmail)" />
                <ValidationMessage For="@(()=>_formModel.Message)" />
            </div>
        </div>

        <div class="text-right">
            <button class="btn btn-danger btn-sm" type="reset" @onclick="CancelModal">Cancel</button>
            <button class="btn btn-success btn-sm" type="submit">Confirm</button>
        </div>
    </div>
</EditForm>

@code {
    [CascadingParameter]
    public ModalParameters Parameters { get; set; }
    private bool _shouldUpdateAlert = false;
    private AlertVO _alertVO = null;
    private AlertFormModel _formModel = null;
    private Func<Task> _onModalClosedAsync = null;
    private AlertFormModelValidator _validator = new AlertFormModelValidator();
    private bool DisplayUpperValue { get { return _formModel.Condition?.ToLower() == "between"; } }

    protected override void OnInitialized()
    {
        _shouldUpdateAlert = Parameters.Get<bool>("ShouldUpdateAlert");
        _alertVO = Parameters.Get<AlertVO>("Alert");
        _onModalClosedAsync = Parameters.Get<Func<Task>>("OnModalClosedAsync");

        _formModel = new AlertFormModel()
        {
            SymbolPair = _alertVO.SymbolPair,
            Condition = _alertVO.Condition,
            ValueType = _alertVO.ValueType,
            Value = _alertVO.Value,
            AdditionalValue = _alertVO.AdditionalValue,
            SendInBrowser = _alertVO.SendInBrowser,
            SendEmail = _alertVO.SendEmail,
            Email = _alertVO.Email,
            Message = _alertVO.Message,
            TriggerOnce = _alertVO.TriggerOnce
        };

    }

    private async Task HandleSubmitAsync(EditContext editContext)
    {
        if (!_formModel.SendEmail)
        {
            _formModel.Email = null;
            _formModel.Message = null;
        }

        if (_formModel.Condition?.ToLower() != "between")
        {
            _formModel.AdditionalValue = 0.0m;
        }

        if (editContext.Validate())
        {
            if (_shouldUpdateAlert)
            {
                await SendUpdateAlertRequestAsync(_alertVO.Id);
            }
            else
            {
                await SendCreateAlertRequestAsync();
            }

            if (_onModalClosedAsync != null)
            {
                await _onModalClosedAsync();
            }

            Modal.Close();
        }
    }

    private async Task SendCreateAlertRequestAsync()
    {
        await Http.SendJsonAsync(HttpMethod.Post, "/api/alerts", _formModel);
    }

    private async Task SendUpdateAlertRequestAsync(int alertId)
    {
        await Http.SendJsonAsync(HttpMethod.Put, $"/api/alerts/{alertId}", _formModel);
    }

    private void CancelModal()
    {
        Modal.Cancel();
    }
}