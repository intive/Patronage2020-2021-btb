@page "/userprofile"
@using BTB.Client.Pages.Dto;
@using BTB.Client.Components.Dashboard;
@using BTB.Client.Components.UserProfile
@using Newtonsoft.Json;
@using BTB.Client.Pages.UserProfile.Enums
@inject ICustomHttpClient Http


<SpinLoader IsLoading="@_processingHttpRequest">
    <LoadingTemplate>
        <div class="d-flex" style="height: 75vh">
            <TimedLoader ShowDelay="500" />
        </div>
    </LoadingTemplate>
    <ContentTemplate>
        <div class="jumbotron">
            <div class="container">
                @if (_userProfileInfo != null)
                {
                    <div class="text-center">
                        <h1>@_userProfileInfo.Username</h1>
                    </div>

                    <div class="container">
                        <div class="row">
                            <h4 class="col-12 col-lg-3 col-xl-3">
                                Profile Bio
                            </h4>
                            <p class="col-12 col-lg-9 col-xl-9 text-break">
                                @GetMessageIfNullOrEmpty(_userProfileInfo.ProfileBio, "No profile bio was provided.")
                            </p>
                        </div>

                        <div class="row">
                            <h4 class="col-12 col-lg-3 col-xl-3">
                                Favourite trading pair
                            </h4>
                            <p class="col-12 col-lg-9 col-xl-9 text-break">
                                @GetMessageIfNullOrEmpty(_userProfileInfo.FavouriteTradingPair, "No favourite trading pair was provided.")
                            </p>
                        </div>

                        <div class="text-center">
                            <a class="btn btn-primary" href="/editprofile">Edit Profile</a>
                        </div>
                    </div>
                }
                else
                {
                    <div class="text-center">
                        <h1>Your profile is not yet configured, click the button below!</h1>
                    </div>

                    <div class="text-center">
                        <a class="btn btn-primary" href="/editprofile">Edit Profile</a>
                    </div>
                }
            </div>
        </div>

        <div id="exTab3" class="container p-0">
            <ul class="nav">
                <li class="active rounded-left" style="@SetFavoriteTabStyle()">
                    <a class="nav-link" href="#1b" data-toggle="tab" style="color:#2c2b30" @onclick="@(() => _currentUserProfileView = CurrentUserProfileView.Favorites)">Favorites</a>
                </li>
                <li class="rounded-right" style="@SetAlertTabStyle()">
                    <a class="nav-link" href="#2b" data-toggle="tab" style="color:#2c2b30" @onclick="@(() => _currentUserProfileView = CurrentUserProfileView.Alerts)">Alerts</a>
                </li>
            </ul>

            <div class="tab-content clearfix rounded shadow-lg">
                <div class="tab-pane rounded active" id="1b">
                    @if (_currentUserProfileView == CurrentUserProfileView.Favorites)
                    {
                        <DashboardFavoriteBody />
                    }
                </div>
                <div class="tab-pane rounded" id="2b">
                    @if (_currentUserProfileView == CurrentUserProfileView.Alerts)
                    {
                        <UserAlertsComponent />
                    }
                </div>
            </div>
        </div>
    </ContentTemplate>
</SpinLoader>

@code {

    private UserProfileInfoDto _userProfileInfo = null;
    private bool _processingHttpRequest = true;
    private CurrentUserProfileView _currentUserProfileView = CurrentUserProfileView.Favorites;

    protected override async Task OnInitializedAsync()
    {
        var response = await Http.GetAsync($"api/userprofile");
        if (response.IsSuccessStatusCode)
        {
            string jsonString = await response.Content.ReadAsStringAsync();
            _userProfileInfo = JsonConvert.DeserializeObject<UserProfileInfoDto>(jsonString);
        }

        _processingHttpRequest = false;
    }

    private string GetMessageIfNullOrEmpty(string content, string message)
    {
        if (string.IsNullOrEmpty(content))
        {
            return message;
        }

        return content;
    }

    private string SetFavoriteTabStyle()
    {
        return _currentUserProfileView == CurrentUserProfileView.Favorites ? "background-color: #F58F7C;" : "background-color: #f8ada0";
    }

    private string SetAlertTabStyle()
    {
        return _currentUserProfileView == CurrentUserProfileView.Alerts ? "background-color: #F58F7C;" : "background-color: #f8ada0";
    }
}
