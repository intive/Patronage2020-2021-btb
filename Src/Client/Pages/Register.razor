@page "/register"

@layout LoginLayout

@inject IAuthorizeService authorizeService
@inject NavigationManager navigationManager

@implements IDisposable

@using Newtonsoft.Json

<div class="card shadow-lg" style="height: @(_height)px">
    <div class="card-body">
        <h5 class="font-weight-normal text-center">Sign Up</h5>

        <label class="validation-message">@_errorMessage</label>

        <EditForm class="form-signin" OnValidSubmit="OnValidSubmit"
                  EditContext="_editContext">
            <DataAnnotationsValidator />

            <div class="input-group form-group">
                <div class="input-group-prepend">
                    <span class="input-group-text"><i class="oi oi-person"></i></span>
                </div>
                <InputText type="text" id="inputUsername" class="form-control" placeholder="Username" autofocus
                           @bind-Value="@_registerParameters.UserName" />
            </div>
            <ValidationMessage For="@(() => _registerParameters.UserName)" />

            <div class="input-group form-group">
                <div class="input-group-prepend">
                    <span class="input-group-text"><i class="oi oi-person"></i></span>
                </div>
                <InputText type="text" id="inputDisplayName" class="form-control" placeholder="Dispaly name" autofocus
                           @bind-Value="@_registerParameters.DisplayName" />
            </div>
            <ValidationMessage For="@(() => _registerParameters.DisplayName)" />

            <div class="input-group form-group">
                <div class="input-group-prepend">
                    <span class="input-group-text"><i class="oi oi-envelope-closed"></i></span>
                </div>
                <InputText type="email" id="inputEmail" class="form-control" placeholder="Email"
                           @bind-Value="_registerParameters.Email" />
            </div>
            <ValidationMessage For="@(() => _registerParameters.Email)" />

            <div class="input-group form-group">
                <div class="input-group-prepend">
                    <span class="input-group-text"><i class="oi oi-key"></i></span>
                </div>
                <InputText type="password" id="inputPassword" class="form-control" placeholder="Password"
                           @bind-Value="@_registerParameters.Password" />
            </div>
            <ValidationMessage For="@(() => _registerParameters.Password)" />

            <div class="input-group form-group">
                <div class="input-group-prepend">
                    <span class="input-group-text"><i class="oi oi-key"></i></span>
                </div>
                <InputText type="password" id="inputPasswordConfirm" class="form-control" placeholder="Confirm password"
                           @bind-Value="@_registerParameters.PasswordConfirm" />
            </div>
            <ValidationMessage For="@(() => _registerParameters.PasswordConfirm)" />

            <div class="form-group">
                <input type="submit" value="Create account" class="btn btn-lg btn-block login_btn">
            </div>

            <hr class="my-3">

            <div class="d-flex justify-content-center links">
                Already have an account?
                <NavLink href="login">
                    Click here to login
                </NavLink>
            </div>

        </EditForm>
    </div>
</div>

@code
{
    private const int MessageHeight = 28;

    private int _baseHeight = 464;
    private int _height { get; set; }

    private dynamic _dyn { get; set; }
    private string _errorMessage { get; set; }

    private RegisterParametersDto _registerParameters { get; set; }

    private EditContext _editContext { get; set; }

    public Register()
    {
        _height = _baseHeight;

        _dyn = string.Empty;
        _errorMessage = string.Empty;

        _registerParameters = new RegisterParametersDto();

        _editContext = new EditContext(_registerParameters);

        _editContext.OnFieldChanged += HandleFieldChanged;
        _editContext.OnValidationStateChanged += HandleValidationStateChanged;
    }

    async Task OnValidSubmit()
    {
        try
        {
            await authorizeService.Register(_registerParameters);
            navigationManager.NavigateTo("");
        }
        catch (Exception e)
        {
            _dyn = JsonConvert.DeserializeObject(e.Message);

            if (_errorMessage == string.Empty)
            {
                _baseHeight += MessageHeight;
                _height += MessageHeight;
            }

            _errorMessage = _dyn.errorMessage;
        }
    }

    private void HandleFieldChanged(object sender, FieldChangedEventArgs e)
    {
        HandleChanged();

        StateHasChanged();
    }

    private void HandleValidationStateChanged(object sender, ValidationStateChangedEventArgs e)
    {
        HandleChanged();

        StateHasChanged();
    }

    private void HandleChanged()
    {
        var errorsCount = _editContext.GetValidationMessages().Count();

        _height = _baseHeight + MessageHeight * errorsCount;
    }

    public void Dispose()
    {
        _editContext.OnFieldChanged -= HandleFieldChanged;
        _editContext.OnValidationStateChanged -= HandleValidationStateChanged;
    }
}
