@page "/login"

@layout LoginLayout

@using BTB.Client.Models.Validation;
@using BTB.Client.Models.Authorization;

@inject IAuthorizeService authorizeService
@inject NavigationManager navigationManager

@implements IDisposable

<div class="card shadow-lg" style="height: @(_height)px">
    <div class="card-body">
        <h5 class="card-title text-center">Sign In</h5>

        <label class="validation-message">@_errorMessage</label>

        <EditForm class="form-signin" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInvalidSubmit"
                  EditContext="_editContext">
            <FluentValidator Validator="_validator" />

            <div class="input-group form-group">
                <div class="input-group-prepend">
                    <span class="input-group-text"><i class="oi oi-person"></i></span>
                </div>
                <InputText id="inputUsername" class="form-control" autofocus placeholder="Username"
                           @bind-Value="_loginParameters.UserName" />
            </div>
            <ValidationMessage For="@(() => _loginParameters.UserName)" />

            <div class="input-group form-group">
                <div class="input-group-prepend">
                    <span class="input-group-text"><i class="oi oi-key"></i></span>
                </div>
                <InputText type="password" id="inputPassword" class="form-control" placeholder="Password"
                           @bind-Value="_loginParameters.Password" />
            </div>
            <ValidationMessage For="@(() => _loginParameters.Password)" />

            <div class="custom-control custom-checkbox mb-3">
                <InputCheckbox id="inputRememberMe" class="form-check-input"
                               @bind-Value="@_loginParameters.RememberMe" />
                <label class="form-check-label" for="inputRememberMe">
                    Remember Me
                </label>
            </div>

            <div class="form-group">
                <input type="submit" value="Sign In" class="btn btn-lg btn-block login_btn">
            </div>

            <hr class="my-3">

            <div class="d-flex justify-content-center links">
                Don't have an account?
                <NavLink href="register">
                    Sign Up!
                </NavLink>
            </div>
            <div class="d-flex justify-content-center links">
                <NavLink href="forgotpassword">
                    Forgot password?
                </NavLink>
            </div>
        </EditForm>
    </div>
</div>

@code
{
    private const int MessageHeight = 24;

    private int _baseHeight = 360;
    private int _height { get; set; }

    private string _errorMessage { get; set; }

    private LoginParametersModel _loginParameters = new LoginParametersModel();
    private LoginParametersModelValidator _validator = new LoginParametersModelValidator();

    private EditContext _editContext { get; set; }

    public Login()
    {
        _height = _baseHeight;
        _errorMessage = string.Empty;

        _editContext = new EditContext(_loginParameters);

        _editContext.OnFieldChanged += HandleFieldChanged;
        _editContext.OnValidationStateChanged += HandleValidationStateChanged;
    }

    private async Task OnValidSubmit()
    {
        try
        {
            await authorizeService.Login(_loginParameters);
            navigationManager.NavigateTo("");
        }
        catch
        {
            OnInvalidSubmit();
        }
        finally
        {

        }
    }

    private void OnInvalidSubmit()
    {
        if (_errorMessage == string.Empty)
        {
            _baseHeight += MessageHeight;
            _height += MessageHeight;
        }

        _errorMessage = "Incorrect username or password.";
    }

    private void HandleFieldChanged(object sender, FieldChangedEventArgs e)
    {
        HandleChanged();

        StateHasChanged();
    }

    private void HandleValidationStateChanged(object sender, ValidationStateChangedEventArgs e)
    {
        HandleChanged();

        StateHasChanged();
    }

    private void HandleChanged()
    {
        var errorsCount = _editContext.GetValidationMessages().Count();

        _height = _baseHeight + MessageHeight * errorsCount;
    }

    public void Dispose()
    {
        _editContext.OnFieldChanged -= HandleFieldChanged;
        _editContext.OnValidationStateChanged -= HandleValidationStateChanged;
    }
}